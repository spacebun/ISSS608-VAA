---
title: "Take-home Exercise 4"
subtitle: "Prototyping Modules for Visual Analytics Shiny Application"
date: February 25, 2024
date-modified:  last-modified
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: true
    
execute: 
  eval: true
  echo: true
  warning: false  
---

## Load packages

```{r}
pacman::p_load(tidyverse, naniar,imputeTS, DT, lubridate,
               ggplot2, patchwork, ggthemes,
               tseries, ggHoriPlot, forecast)

```

## Import cleaned data

```{r}
weather_data <- read_rds("data/weather_imputed.rds") 
```


## Data Wrangling

Data: Ang Mo Kio 

Time period: 2021-2023 

Variable: Mean Temperature

```{r}
# Extract the temperature data into a variable *temp_data*
temp_data <- weather_data %>%
  select(c(Station, Date, `Mean Temperature (°C)`, LAT, LONG))

# Filter for a single station, e.g., "Ang Mo Kio"
ang_mo_kio_data <- temp_data %>% 
  filter(Station == "Ang Mo Kio")

# Change Date to chr type for time series
ang_mo_kio_data$Date <- as.character (ang_mo_kio_data$Date) 
str(ang_mo_kio_data)
```

Split data into train test split (0.8)

```{r}
# Sort the data by Date if it's not already sorted
ang_mo_kio_data <- ang_mo_kio_data[order(ang_mo_kio_data$Date), ]

# Split data into training and testing sets based on the 'Date' column
train_size <- floor(nrow(ang_mo_kio_data) * 0.8)  # Calculate the size of the training set
train_data <- ang_mo_kio_data[1:train_size, ]
test_data <- ang_mo_kio_data[(train_size + 1):nrow(ang_mo_kio_data), ]
```

Selecting column Date and Mean Temperature (°C)

```{r}
test_clean <- test_data %>% 
                select(Date, `Mean Temperature (°C)`)

train_clean <- train_data %>% 
                select(Date, `Mean Temperature (°C)`)
```

Create time series object for data train

```{r}
ts_train <- ts(data = train_clean$`Mean Temperature (°C)`,
                start = c(2021,01),
                frequency = 365)
autoplot(ts_train)
```

Create time series object for data test

```{r}
ts_test <- ts(data = test_clean$`Mean Temperature (°C)`,
                start = c(2023,05,27),
                frequency = 365)
autoplot(ts_test)
```


## Exploratory plot

### Decomposing a time series means separating it into its constituent components.

```{r}
climate_dc <- decompose(ts_train)
plot(climate_dc)
```

## Create Holt-Winters Model

```{r}
climate_hw <- HoltWinters(ts_train,seasonal = "additive")

```

```{r}
# Forecast model
climate_forecast <- forecast(climate_hw, h=114)

```

```{r}
# Check accuracy
forecast::accuracy(climate_forecast, ts_test)
```

#### Visualization of Holt-Winters Model

```{r}
# Visualization
ts_train %>% 
  autoplot(series = "Actual") +
  autolayer(climate_forecast$fitted, series = "Train") +
  autolayer(climate_forecast$mean, series = "Test")
```

## Create ARIMA

```{r}
# Check stationarity. Must be stationary to proceed. (p-val <0.05)
adf.test(ts_train)
```


```{r}
# Create ARIMA on train
climate_auto <- auto.arima(ts_train, seasonal = T)
climate_auto
```


```{r}
# Forecast
climate_auto_f <- forecast(climate_auto, h=114)
climate_auto_f
```


```{r}
# Check accuracy
accuracy(climate_auto_f, ts_test)
```

### Visualization of ARIMA Model

```{r}
# Visualization
ts_train %>% 
  autoplot(series = "Actual") +
  autolayer(climate_auto_f$fitted, series = "Train") +
  autolayer(climate_auto_f$mean, series = "Test")
```

## Create STLM Model

```{r}
# Create STLM
climate_stlm <- stlm(y= ts_train,
                     s.window = 356,
                     method = "arima")

summary(climate_stlm$model)
```

```{r}
# Forecast
climate_stlm_forecast <- forecast(climate_stlm, h = 114)
climate_stlm_forecast
```

```{r}
# Check Accuracy

accuracy(climate_stlm_forecast, ts_test)

```

### Visualization of STLM using ARIMA method

```{r}
ts_train %>% 
  autoplot(series = "Actual") +
  autolayer(climate_stlm_forecast$fitted, series = "Train") +
  autolayer(climate_stlm_forecast$mean, series = "Test")
```