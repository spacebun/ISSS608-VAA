---
title: "Exploratory Data Analysis"
subtitle: "Air Quality / Pollutants"
date: February 25, 2024
date-modified:  last-modified
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: false
    
execute: 
  eval: true
  echo: true
  warning: false  

draft: true
---

::: callout-note
page in draft mode
:::

## Overview

For air quality, we have the concentration of [6 air pollutants](https://www-nea-gov-sg-admin.cwp.sg/our-services/pollution-control/air-pollution/faqs#chapterB) for various areas in Singapore for the period of 2014 to 2023.

Objective of this exercise is to:

-   Explore visualizations for air quality

## Getting Started

### Load libraries

First, we load packages required:

-   **naniar**: for using *miss_vis()* function to check data for missing values

```{r}
pacman::p_load(naniar,
               tidyverse, haven,
               ggrepel, ggthemes,
               ggridges, ggdist,
               patchwork, ggpattern,
               hrbrthemes, plotly,
               sf, tmap,
               lubridate,
               DT)
```

### Import data

```{r}
pollutants <- read_csv("../data/pollutants_singapore.csv", locale = locale(encoding = "ISO-8859-1"))
```

## Check data health

We first explore dataset structure and check the health of the dataset by:

-   using *glimpse()* to look at the dataset structure, data types of the columns, and some values of the dataset,

-   using *datatable()* from the DT package to view the dataset more interactively,

-   using *duplicate()* to check the dataset for any duplicated entries and,

-   using *vis_miss()* to check the state of missing values in the dataset.

::: panel-tabset
### glimpse()

```{r}
glimpse(pollutants)
```

### datatable()

```{r}
datatable(pollutants, 
          class= "compact",
          rownames = FALSE,
          width="100%", 
          options = list(pageLength = 10,scrollX=T))
```

### duplicated()

```{r}
pollutants[duplicated(pollutants),]
```

### vis_miss()

```{r}
vis_miss(pollutants)
```
:::

### Understanding the data

There are 9 columns in the dataset:

*Area* <chr>

The ambient air quality in Singapore is continuously monitored through a network of air monitoring sensors across the island. The data from the air monitoring sensors are reported for [five regions](https://www.nea.gov.sg/our-services/pollution-control/air-pollution/faqs) in Singapore – **North, South, East, West, Central**.

*date* <chr>

The date for each row is recorded in YYYY/MM/DD format, of type chr. We will need to convert this to date/time classes e.g. Date, POSIXct, or POSIXlt.

*pm25*, *pm10*, *o3*, *no2*, *so2*, *co* <dbl>

The air monitoring sensors measure concentration levels of **six** air pollutants: fine particulate matter (PM~2.5~), particulate matter (PM~10~), ozone (O~3~), nitrogen dioxide (NO~2~), sulphur dioxide (SO~2~) and carbon monoxide (CO). The values are reported in µg/m^3^ for each 24h period / day.

*psi* <dbl>

PSI is the air quality index used in Singapore. It is reported as a number on a scale of **0 to 500**. In this dataset, the *psi* column is the 24-hour PSI value.

### More on PSI

PSI can be grouped by index values and descriptors, explaining the effects of the levels, according to Singapore's National Environment Agency (NEA).

|   PSI   |   Descriptor   |                                                          General Health Effects                                                           |
|:-------:|:--------------:|:-----------------------------------------------------------------------------------------------------------------------------------------:|
|  0–50   |      Good      |                                                                   None                                                                    |
| 51–100  |    Moderate    |                                                  Few or none for the general population                                                   |
| 101–200 |   Unhealthy    | Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects. To stay indoors. |
| 201–300 | Very unhealthy |                       Health warnings of emergency conditions. The entire population is more likely to be affected.                       |
|  301+   |   Hazardous    |                                     Health alert: everyone may experience more serious health effects                                     |

The PSI is computed based on the 24-hour average of concentration levels of 6 pollutants. A sub-index value is computed for each pollutant based on the pollutant’s ambient air concentration. The highest sub-index value is then taken as the PSI value. **In other words, the PSI is determined by the pollutant with the most significant concentration.** Technical details on how the PSI is calculated can be found here: [computation of PSI](http://www.haze.gov.sg/docs/default-source/faq/computation-of-the-pollutant-standards-index-(psi).pdf).

## Pre-processing data

### Convert date column to date type

```{r}
# Convert date column from character to date type
pollutants <- pollutants %>%
  mutate(date = trimws(date), 
         date = as.Date(date, format="%Y/%m/%d"))

# Rename date column top 'Date'
pollutants <- pollutants %>% 
       rename("Date" = "date")

# Check that date column is now date type
str(pollutants)
```

## Plots

### Pollutants over time

```{r}
# Reshape data to long format
pollutants_long <- pollutants %>%
  pivot_longer(cols = c(pm25, pm10, o3, no2, so2, co, psi), names_to = "pollutant", values_to = "value")

# Time series plot for all pollutants
ggplot(pollutants_long, aes(x = Date, y = value, color = pollutant)) +
  geom_line() +
  labs(title = "Pollutants over Time", x = "Date", y = "Concentration", color = "Pollutant") +
  theme_minimal()
```

```{r}
#| code-fold: false
#| eval: false

# Density plot for PM2.5 across Areas
ggplot(pollutants, aes(x = pm25, fill = Area)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plot of PM2.5 by Area", x = "PM2.5", y = "Density") +
  theme_minimal() +
  scale_fill_discrete(name = "Area")

```

```{r}
# Filter for a specific year, e.g., 2020
pollutants_filtered <- pollutants %>%
  filter(year(Date) == 2020)

# Density plot for PM2.5 across Areas for the filtered year
ggplot(pollutants_filtered, aes(x = pm25, fill = Area)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plot of PM2.5 by Area for 2020", x = "PM2.5", y = "Density") +
  theme_minimal() +
  scale_fill_discrete(name = "Area")


```

```{r}
#| code-fold: false
#| eval: false

# Boxplot for PM10
ggplot(pollutants, aes(x = Area, y = pm25, fill = Area)) +
  geom_boxplot(alpha = 0.5) +
  labs(title = "Boxplot of PM2.5 by Area", x = "Area", y = "PM10") +
  theme_minimal() +
  scale_fill_discrete(name = "Area")
```
