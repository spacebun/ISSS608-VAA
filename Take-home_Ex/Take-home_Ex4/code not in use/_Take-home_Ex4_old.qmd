---
title: "Take-home Exercise 4 (Work in Progress)"
subtitle: "Prototyping Modules for Visual Analytics Shiny Application"
date: February 25, 2024
date-modified:  last-modified
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: true
    
execute: 
  eval: true
  echo: true
  warning: false  
---

# Overview

In this exercise, I will use a module of the Shiny application for the Group Project component to fulfill the following objectives:

-   To evaluate and determine what are the necessary R packages needed for the Shiny application supported in R CRAN,

-   To prepare and test the specific R codes can be run and returned the correct output as expected,

-   To determine the parameters and outputs that will be exposed on the Shiny applications, and

-   To select the appropriate Shiny UI components for exposing the parameters determined above.

My submission includes:

-   The prototype module report, that provides detailed discussion and explanation of:

    -   the **data preparation** process,

    -   the selection of **data visualisation techniques** used,

    -   and the data visualisation design and interactivity principles and best practices implemented.

-   The proposed UI design for the different components of the UI.

# Project details

For our project, we aim to create a Shiny app with user-friendly functionalities, to effectively visualize and analyze climate data.

The R Shiny app will consists of four sections:

-   Homepage tab: Users have an overview of the dataset used in application. It will include a map of Singapore and interactivity elements that allow users to view the dataset at different points in time.
-   EDA and CDA tab: Users can explore the distribution and trends in the dataset for specific periods or locations (station or region), and use statistical analysis to confirm the trends.
-   Time series analysis: Users can explore the time series decomposition of the different variables, and select the type of model that they would like to use for univariate time series forecasting.
-   Clustering time series analysis: Users can explore grouping stations with similar weather patterns or grouping time periods with similar patterns. The user would then be able to choose different models to forecast the grouped data.

For this exercise, we will focus on the last module.

# Getting started

## Load packages

First, we load packages required:

-   **tidyverse**: this package includes a variety of R packages such as **ggplot2** and **dplyr**. the packages will be used to support tasks such as reading in packages or data manipulation or plotting

-   **naniar**: for using *miss_vis()* function to check data for missing values

-   **DT**: for using *datatable()* to view the dataset interactively

-   **lubridate**: for handling date-time formats

-   \<to be updated\>

```{r}
pacman::p_load(tidyverse, naniar, imputeTS, DT, knitr, lubridate,
               ggplot2, patchwork, ggthemes,
               tseries, ggHoriPlot,
               TSclust, fable, dtwclust, dendextend,
               ggraph, plotly, factoextra, ggdendro,
               sf, terra, gstat, viridis)
```

# Data Preparation

::: callout-note
To skip ahead to view the cleaned data, you can click @sec-viewcleaneddataset.
:::

## Import data

```{r}
raw_weather_data <- read_csv("data/climate_historical_daily_records.csv")
```

Details of dataset:

| Dataset            | Description                                                   | Period    | Source                                              |
|--------------------|---------------------------------------------------------------|-----------|-----------------------------------------------------|
| *raw_weather_data* | Climate Historical Daily Records for 63 stations in Singapore | 2014-2023 | http://www.weather.gov.sg/climate-historical-daily/ |

This dataset was retrieved from the [Meteorological Service Singapore](http://www.weather.gov.sg/climate-historical-daily/) site, and had some basic [pre-processing steps performed in python](https://isss608-airweatheranalytics.netlify.app/code/data_retrieval) due to the large amount of files:

-   Combine all downloaded CSV files into one dataframe.

-   Performing cleaning to merge data of columns with slightly different names due to case sensitivity (e.g., “min” vs. “Min”)

-   (‘Highest 30 **Min** Rainfall (mm)’, ‘Highest 30 **min** Rainfall (mm)’)

-   (‘Highest 60 **Min** Rainfall (mm)’, ‘Highest 60 **min** Rainfall (mm)’)

-   (‘Highest 120 **Min** Rainfall (mm)’, ‘Highest 120 **min** Rainfall (mm)’)

-   Add the latitude and longitude of each station to the dataframe.

## Check structure with `glimpse()`

```{r}
glimpse(raw_weather_data)
```

There are 202, 976 rows, and 15 columns in the dataset. In the next few steps, we will drop specific columns and rows based on the project focus.

## Filter dataset for desired period

While the dataset contains 10 years of data from 2014 to 2023, we will focus on the most recent dataset for a 3 year period, from **2021 to 2023**. This period was chosen to maximise the overall availability of data across the stations.

```{r}
raw_weather_data <- raw_weather_data %>%
  filter(Year >= 2021)
print(paste("The dataset covers the period from", min(raw_weather_data$Year, na.rm = TRUE), "to", max(raw_weather_data$Year, na.rm = TRUE), "."))
```

## Drop unused columns

We will not be using all 15 columns for this project. The following columns will be dropped:

-   `Highest 30 Min Rainfall (mm)`
-   `Highest 60 Min Rainfall (mm)`
-   `Highest 1200 Min Rainfall (mm)`
-   `Mean Wind Speed (km/h)`
-   `Max Wind Speed (km/h)`

```{r}
# Drop columns
raw_weather_data <- raw_weather_data %>%
  select(-c(`Highest 30 Min Rainfall (mm)`, 
            `Highest 60 Min Rainfall (mm)`, 
            `Highest 120 Min Rainfall (mm)`,
            `Mean Wind Speed (km/h)`,
            `Max Wind Speed (km/h)`))
```

## Remove rows for specific Stations

The Meteorological Service Singapore also provides a file, [Station Records](http://www.weather.gov.sg/wp-content/uploads/2022/06/Station_Records.pdf) that has some information on the availability of data for each station. After examining the station records file, we found that 41 stations had missing information for some variables. We will hence drop rows for these stations.

```{r}
#| code-fold: true
#| code-summary: "show code"
# Drop rows of 41 stations
# Define the station names to remove
stations_to_remove <- c("Macritchie Reservoir", "Lower Peirce Reservoir", "Pasir Ris (West)", "Kampong Bahru", "Jurong Pier", "Ulu Pandan", "Serangoon", "Jurong (East)", "Mandai", "Upper Thomson", "Buangkok", "Boon Lay (West)", "Bukit Panjang", "Kranji Reservoir", "Tanjong Pagar", "Admiralty West", "Queenstown", "Tanjong Katong", "Chai Chee", "Upper Peirce Reservoir", "Kent Ridge", "Somerset (Road)", "Punggol", "Tuas West", "Simei", "Toa Payoh", "Tuas", "Bukit Timah", "Yishun", "Buona Vista", "Pasir Ris (Central)", "Jurong (North)", "Choa Chu Kang (West)", "Serangoon North", "Lim Chu Kang", "Marine Parade", "Choa Chu Kang (Central)", "Dhoby Ghaut", "Nicoll Highway", "Botanic Garden", "Whampoa")

# Remove rows with the specified station names
raw_weather_data <- raw_weather_data[!raw_weather_data$Station %in% stations_to_remove, ]

# Print the number of stations left
print(sprintf("There were %d stations removed.There are %d stations left.", length(stations_to_remove), n_distinct(raw_weather_data$Station)))
```

## Check for duplicates

```{r}
#| code-fold: true
#| code-summary: "show code"
# Identify duplicates
duplicates <- raw_weather_data[duplicated(raw_weather_data[c("Station", "Year", "Month", "Day")]) | duplicated(raw_weather_data[c("Station", "Year", "Month", "Day")], fromLast = TRUE), ]

# Check if 'duplicates' dataframe is empty
if (nrow(duplicates) == 0) {
  print("The combination of Station Name, Year, Month, and Day is unique.")
} else {
  print("There are duplicates in the combination of Station Name, Year, Month, and Day. Showing duplicated rows:")
  print(duplicates)
}
```

## Check and handle missing values

### First check for missing values

Missing values in this dataset can be represented by:

-   `\u0097`

-   `NA`

-   `-`

We first replace these values with actual NA values:

```{r}
raw_weather_data <- raw_weather_data %>%
  mutate(across(where(is.character), ~na_if(.x, "\u0097"))) %>%
  mutate(across(where(is.character), ~na_if(.x, "NA"))) %>%
  mutate(across(where(is.character), ~na_if(.x, "-")))
```

Next, we visualize the missing values in the dataset:

```{r}
#| code-fold: true
#| code-summary: "show code"
vis_miss(raw_weather_data)
```

We will take steps to handle the missing data.

### Remove Stations with significant missing data

We have identified two checks to make:

-   Check which stations have no recorded data for entire months.

-   Check which stations have more than 7 consecutive days of missing data

For both these checks, we will remove the entire station from the dataset as it would not be practical to impute such large amounts of missing values.

#### Identify and remove Stations with no recorded data for entire months

Some stations have no recorded data for entire months, as summarised in the table below:

```{r}
#| code-fold: true
#| code-summary: "show code"
# Create complete combination of Station, Year, and Month
all_combinations <- expand.grid(
  Station = unique(raw_weather_data$Station),
  Year = 2021:2023,
  Month = 1:12
)

# Left join this with the original weather data to identify missing entries
missing_months <- all_combinations %>%
  left_join(raw_weather_data, by = c("Station", "Year", "Month")) %>%
  # Use is.na() to check for rows that didn't have a match in the original data
  filter(is.na(Day)) %>%
  # Select only the relevant columns for the final output
  select(Station, Year, Month)

# Create a summary table that lists out the missing months
missing_months_summary <- missing_months %>%
  group_by(Station, Year) %>%
  summarise(MissingMonths = toString(sort(unique(Month))), .groups = 'drop')

kable(missing_months_summary)
```

We hence drop these stations from our dataset:

```{r}
#| code-fold: true
#| code-summary: "show code"
raw_weather_data <- anti_join(raw_weather_data, missing_months, by = "Station")

print(sprintf("The folowing %d stations were dropped: %s", n_distinct(missing_months$Station), paste(unique(missing_months$Station), collapse = ", ")))

print(sprintf("There are %d stations left: ", n_distinct(raw_weather_data$Station)))

kable(unique(raw_weather_data$Station),
      row.names = TRUE,
      col.names = "Station",
      caption = "List of Remaining Stations")
```

#### Identify and remove Stations with excessive missing values

If there are any missing values, we can try to impute these missing values. However, if there are 7 or more consecutive values missing, we will remove these stations first.

```{r}
#| code-fold: true
#| code-summary: "show code"
# Define a helper function to count the number of 7 or more consecutive NAs
count_seven_consecutive_NAs <- function(x) {
  na_runs <- rle(is.na(x))
  total_consecutive_NAs <- sum(na_runs$lengths[na_runs$values & na_runs$lengths >= 7])
  return(total_consecutive_NAs)
}

# Apply the helper function to each relevant column within grouped data
weather_summary <- raw_weather_data %>%
  group_by(Station, Year, Month) %>%
  summarise(across(-Day, ~ count_seven_consecutive_NAs(.x), .names = "count_consec_NAs_{.col}"), .groups = "drop")

# Filter to keep only rows where there is at least one column with 7 or more consecutive missing values
weather_summary_with_consecutive_NAs <- weather_summary %>%
  filter(if_any(starts_with("count_consec_NAs_"), ~ . > 0))

# View the result
print(sprintf("There are %d stations with 7 or more consecutive missing values.", n_distinct(weather_summary_with_consecutive_NAs$Station)))

# kable(weather_summary_with_consecutive_NAs)
datatable(weather_summary_with_consecutive_NAs, 
            class= "compact",
            rownames = FALSE,
            width="100%", 
            options = list(pageLength = 10, scrollX=T),
          caption = 'Details of stations with >=7 missing values')
```

We hence drop these stations from our dataset:

```{r}
#| code-fold: true
#| code-summary: "show code"
raw_weather_data <- anti_join(raw_weather_data, weather_summary_with_consecutive_NAs, by = "Station")

print(sprintf("The folowing %d stations were dropped: %s", n_distinct(weather_summary_with_consecutive_NAs$Station), paste(unique(weather_summary_with_consecutive_NAs$Station), collapse = ", ")))

print(sprintf("There are %d stations left: ", n_distinct(raw_weather_data$Station)))

kable(unique(raw_weather_data$Station),
      row.names = TRUE,
      col.names = "Station",
      caption = "List of Remaining Stations")
```

### Second check for missing values

From the check below we see there are still missing values in our data. We will impute these values in the next step.

```{r}
#| code-fold: true
#| code-summary: "show code"
vis_miss(raw_weather_data)
```

### Impute missing values

To handle the missing values for the remaining Stations, we will impute missing values using simple moving average from **imputeTS** package.

#### Create Date column

```{r}
raw_weather_data <- raw_weather_data %>%
  mutate(Date = as.Date(paste(Year, Month, Day, sep = "-"))) %>%
  relocate(Date, .after = 1)
```

#### Using `imputeTS` package

```{r}
# Define the weather variables to loop through
weather_variables <- c("Daily Rainfall Total (mm)", "Mean Temperature (°C)", "Maximum Temperature (°C)", "Minimum Temperature (°C)")

# Ensure raw_weather_data is correctly copied to a new data frame for imputation
weather_data_imputed <- raw_weather_data

# Loop through each weather variable to impute missing values
for(variable in weather_variables) {
  # Convert variable to numeric, ensuring that the conversion warnings are handled if necessary
  weather_data_imputed[[variable]] <- as.numeric(as.character(weather_data_imputed[[variable]]))
  
  # Impute missing values using a moving average
  weather_data_imputed <- weather_data_imputed %>%
    group_by(Station) %>%
    arrange(Station, Date) %>%
    mutate("{variable}" := round(na_ma(.data[[variable]], k = 7, weighting = "simple"), 1)) %>%
    ungroup()
}
```

### Final visual check for missing values

```{r}
#| code-fold: true
#| code-summary: "show code"
vis_miss(weather_data_imputed)
```

### Add specific columns to data

These columns are added as they may be used in plots later.

```{r}
weather_data_imputed <- weather_data_imputed %>% 
  mutate(Date_mine = make_date(2023, month(Date), day(Date)),
         Month_Name = factor(months(Date), levels = month.name),
         Week = isoweek(Date),
         Weekday = wday(Date) %>%
  select(1:5, Date_mine, Month_Name, Week, Weekday, everything()) # Re-order columns
  )
```

## Summary of cleaned data {#sec-viewcleaneddataset}

### Details of stations and time period of data

```{r}
#| code-fold: true
#| code-summary: "show code"
time_period_start <- min(weather_data_imputed$Date)
time_period_end <- max(weather_data_imputed$Date)
cat("\nThe time period of the dataset is from", format(time_period_start, "%Y-%m-%d"),"to", format(time_period_end, "%Y-%m-%d"), "\n")

print(sprintf("There are %d stations: ", n_distinct(weather_data_imputed$Station)))

kable(unique(weather_data_imputed$Station),
      row.names = TRUE,
      col.names = "Station",
      caption = "List of Stations")
```

### Check structure with `glimpse()`

```{r}
glimpse(weather_data_imputed)
```

### View dataset as interactive table

```{r}
#| code-fold: true
#| code-summary: "show code"
datatable(weather_data_imputed, 
            class= "compact",
            rownames = FALSE,
            width="100%", 
            options = list(pageLength = 10, scrollX=T),
          caption = 'Cleaned and imputed weather dataset')
```

## Save cleaned data to .rds

```{r}
write_rds(weather_data_imputed, "data/weather_imputed_11stations.rds")
```

## Import cleaned data

The below code can be used to import the cleaned data.

```{r}
weather_data <- read_rds("data/weather_imputed_11stations.rds") 
# weather_data <- read_rds("data/weather_imputed.rds") 
```

# Exploratory Data Analysis of Multiple Time Series

## Overview of Exploratory Data Analysis

There are 4 variables in the dataset, *weather_data*, that we can use for time series analysis:

-   `Daily Rainfall Total (mm)`
-   `Mean Temperature (°C)`
-   `Minimum Temperature (°C)`
-   `Maximum Temperature (°C)`

For this exercise, we will utilise Horizon Plots to visualize multiple time series data. Future work on the project may include other exploratory plots for visualizing multiple time series data.

## Horizon Plots

Horizon plots are a visualization technique used for displaying multiple time series data. Since the data contains data across **multiple years** for **multiple stations**, it would be valuable to allow users to use horizon plots to visually explore patterns or trends across multiple time series data.

The plots below show the different versions of horizon plots.

::: callout-note
To make the code reproducible, efforts were made to avoid hard-coding values that may need adjustments. Instead, variable assignments were used to allow for flexibility and easier modifications in the future.
:::

### Horizon Plot (Reproducible)

```{r}
#| code-fold: true
#| code-summary: "show code"
#| fig-width: 10
#| fig-height: 4
#| echo: false
#| eval: false
compareAcrossHorizon = "Stations"
selectedYear = 2021 # Need to update below code for selection of year
selected_var = "Mean Temperature (°C)"
date_breaks = "3 month"
title <- ifelse(compareAcrossHorizon == "Years",
                paste(selected_var, "for", selectedStation, "across the years 2021 to 2023"),
                paste(selected_var, "for", selectedYear, "across station(s)"))

# if (input$compareAcrossHorizon == "Years") {
#   filtered_data <- weather_data %>%
#     filter(Station %in% input$selectedStation)
# } else if (input$compareAcrossHorizon == "Stations") {
#   filtered_data <- weather_data %>%
#     filter(Station %in% input$selectedStations, Year == input$selectedYear)
# }

# facet_var = ifelse(input$compareAcrossHorizon == "Years", "Year", "Station")

# Compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data %>% 
  mutate(
    outlier = between(
      .data[[selected_var]], 
      quantile(.data[[selected_var]], 0.25, na.rm = TRUE) -
        1.5 * IQR(.data[[selected_var]], na.rm = TRUE),
      quantile(.data[[selected_var]], 0.75, na.rm = TRUE) +
        1.5 * IQR(.data[[selected_var]], na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Mean Temperature (°C)`))/2
sca <- seq(range(cutpoints$`Mean Temperature (°C)`)[1], 
           range(cutpoints$`Mean Temperature (°C)`)[2], 
           length.out = 7)[-4]

ori <- round(ori, 2) # The origin, rounded to 2 decimal places
sca <- round(sca, 2) # The horizon scale cutpoints

weather_data %>% ggplot() +
  geom_horizon(aes(x = Date,
                   y = .data[[selected_var]],
                   fill = after_stat(Cutpoints)),
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(`Station`~.) +
  theme_few() +
  theme(panel.spacing.y=unit(0, "lines"), strip.text.y = element_text(
    size = 5, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size=7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
    scale_x_date(expand=c(0,0), date_breaks = date_breaks, date_labels = "%b%y") +
  ggtitle(title)
```

### Horizon Plot of Mean Temperature (°C) across different weather stations, for 2021 - 2023

```{r}
#| code-fold: true
#| code-summary: "show code"
#| fig-width: 10
#| fig-height: 4
#| 
# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data %>% 
  mutate(
    outlier = between(
      `Mean Temperature (°C)`, 
      quantile(`Mean Temperature (°C)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE),
      quantile(`Mean Temperature (°C)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE))) %>% 
  filter(outlier)
ori <- sum(range(cutpoints$`Mean Temperature (°C)`))/2
sca <- seq(range(cutpoints$`Mean Temperature (°C)`)[1], 
           range(cutpoints$`Mean Temperature (°C)`)[2], 
           length.out = 7)[-4]
ori <- round(ori, 2) # The origin, rounded to 2 decimal places
sca <- round(sca, 2) # The horizon scale cutpoints
weather_data %>% ggplot() +
  geom_horizon(aes(x = Date,
                   y = `Mean Temperature (°C)`,
                   fill = after_stat(Cutpoints)),
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(`Station`~.) +
  theme_few() +
  theme(panel.spacing.y=unit(0, "lines"), strip.text.y = element_text(
    size = 5, angle = 0, hjust = 0),
    # legend.position = 'none',
    axis.text.y = element_blank(),
    axis.text.x = element_text(size=7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
    scale_x_date(expand=c(0,0), date_breaks = "3 month", date_labels = "%b%y") +
  ggtitle('Mean Temperature (°C) across different weather stations (2021 - 2023)')
```

### Horizon Plot of Mean Temperature (°C) across different weather stations for a specified year, 2023

```{r}
#| code-fold: true
#| code-summary: "show code"
#| fig-width: 10
#| fig-height: 4
# Ensure data has Year, Month, Date column + Date_mine column
weather_data <- weather_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date)) %>%
  mutate(Date_mine = make_date(2023, month(Date), day(Date)))

# Filter for specified year only
weather_data_2023 <- weather_data %>% 
  filter(Year == 2023) 

# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data_2023 %>% 
  mutate(
    outlier = between(
      `Mean Temperature (°C)`, 
      quantile(`Mean Temperature (°C)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE),
      quantile(`Mean Temperature (°C)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Mean Temperature (°C)`))/2
sca <- seq(range(cutpoints$`Mean Temperature (°C)`)[1], 
           range(cutpoints$`Mean Temperature (°C)`)[2], 
           length.out = 7)[-4]

ori <- round(ori, 2) # The origin, rounded to 2 decimal places
sca <- round(sca, 2) # The horizon scale cutpoints

# Plot horizon plot
weather_data_2023 %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Mean Temperature (°C)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Station ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Mean Temperature (°C) for the year 2023',
          'across the stations')
```

### Horizon Plot of Mean Temperature (°C) For Ang Mo Kio across the years

```{r}
#| code-fold: true
#| code-summary: "show code"
#| fig-width: 10
#| fig-height: 4
# Step 0: Filter for specified station only 
ang_mo_kio_data <- weather_data %>% 
  filter(Station == "Seletar")

# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- ang_mo_kio_data %>% 
  mutate(
    outlier = between(
      `Mean Temperature (°C)`, 
      quantile(`Mean Temperature (°C)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE),
      quantile(`Mean Temperature (°C)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Mean Temperature (°C)`))/2
sca <- seq(range(cutpoints$`Mean Temperature (°C)`)[1], 
           range(cutpoints$`Mean Temperature (°C)`)[2], 
           length.out = 7)[-4]

ori <- round(ori, 2) # The origin, rounded to 2 decimal places
sca <- round(sca, 2) # The horizon scale cutpoints

# Step 2: Ensure data has Year, Month, Date column. Also create a Date_mine column for comparing across years
ang_mo_kio_data <- ang_mo_kio_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date)) %>%
  mutate(Date_mine = make_date(2023, month(Date), day(Date)))

# Step 3: Plot horizon plot
ang_mo_kio_data %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Mean Temperature (°C)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Year ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Mean Temperature (°C) For Ang Mo Kio',
          'across the years 2021 to 2023')
```

### Horizon Plot of Mean Temperature (°C) across average of all weather stations from 2021 to 2023

```{r}
#| code-fold: true
#| code-summary: "show code"
#| fig-width: 10
#| fig-height: 4

# Step 0: Compute average of Mean Temperature (°C) across all stations
weather_data_all_stations <- weather_data %>%
  group_by(Date) %>%
  summarise(`Mean Temperature (°C)` = mean(`Mean Temperature (°C)`))

# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data_all_stations %>% 
  mutate(
    outlier = between(
      `Mean Temperature (°C)`, 
      quantile(`Mean Temperature (°C)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE),
      quantile(`Mean Temperature (°C)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Mean Temperature (°C)`))/2
sca <- seq(range(cutpoints$`Mean Temperature (°C)`)[1], 
           range(cutpoints$`Mean Temperature (°C)`)[2], 
           length.out = 7)[-4]

ori <- round(ori, 2) # The origin, rounded to 2 decimal places
sca <- round(sca, 2) # The horizon scale cutpoints

# Step 2: Ensure data has Year, Month, Date column. Also create a Date_mine column for comparing across years
weather_data_all_stations <- weather_data_all_stations %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date)) %>%
  mutate(Date_mine = make_date(2023, month(Date), day(Date)))

# Step 3: Plot horizon plot
weather_data_all_stations %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Mean Temperature (°C)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Year ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Mean Temperature (°C) across across all weather stations', 
          'from 2021 to 2023')
```

#### Horizon Plot of Daily Rainfall Total across all weather stations from 2021 to 2023

This plot may not make sense as we may need to sum up rainfall for each day across all weather stations first before plotting.

```{r}
#| code-fold: true
#| code-summary: "show code"
#| fig-width: 10
#| fig-height: 4
# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data %>% 
  mutate(
    outlier = between(
      `Daily Rainfall Total (mm)`, 
      quantile(`Daily Rainfall Total (mm)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Daily Rainfall Total (mm)`, na.rm = TRUE),
      quantile(`Daily Rainfall Total (mm)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Daily Rainfall Total (mm)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Daily Rainfall Total (mm)`))/2
sca <- seq(range(cutpoints$`Daily Rainfall Total (mm)`)[1], 
           range(cutpoints$`Daily Rainfall Total (mm)`)[2], 
           length.out = 7)[-4]

ori <- round(ori, 2) # The origin, rounded to 2 decimal places
sca <- round(sca, 2) # The horizon scale cutpoints


# Step 2: Ensure data has Year, Month, Date column. Also create a Date_mine column for comparing across years
weather_data <- weather_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date)) %>%
  mutate(Date_mine = make_date(2023, month(Date), day(Date)))

# Step 3: Plot horizon plot
weather_data %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Daily Rainfall Total (mm)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Year ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Daily Rainfall Total across all weather stations', 
          'from 2021 to 2023')

```

#### Horizon Plot of Daily Rainfall Total (mm) across all the stations for a specified year

```{r}
#| code-fold: true
#| code-summary: "show code"
#| fig-width: 10
#| fig-height: 4
# Ensure data has Year, Month, Date column
weather_data <- weather_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date)) %>%
  mutate(Date_mine = make_date(2023, month(Date), day(Date)))

# Filter for specified year only
weather_data_2023 <- weather_data %>% 
  filter(Year == 2023)

# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data_2023 %>% 
  mutate(
    outlier = between(
      `Daily Rainfall Total (mm)`, 
      quantile(`Daily Rainfall Total (mm)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Daily Rainfall Total (mm)`, na.rm = TRUE),
      quantile(`Daily Rainfall Total (mm)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Daily Rainfall Total (mm)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Daily Rainfall Total (mm)`))/2
sca <- seq(range(cutpoints$`Daily Rainfall Total (mm)`)[1], 
           range(cutpoints$`Daily Rainfall Total (mm)`)[2], 
           length.out = 7)[-4]

ori <- round(ori, 2) # The origin, rounded to 2 decimal places
sca <- round(sca, 2) # The horizon scale cutpoints

# Plot horizon plot
weather_data_2023 %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Daily Rainfall Total (mm)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Station ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Daily Rainfall Total (mm) for the year 2023',
          'across the stations')
```

# Clustering of Multiple Time Series

## Overview

Clustering is the practice of finding hidden patterns or similar groups in data.

To perform time series clustering, we will use the function [`tsclust`](https://www.rdocumentation.org/packages/dtwclust/versions/3.1.1/topics/tsclust) from [`dtwclust`](https://www.rdocumentation.org/link/dtwclust?package=dtwclust&version=3.1.1).

https://cran.r-project.org/web/packages/dtwclust/vignettes/dtwclust.pdf

We will divide cluster analysis into the following parts:

-   Format data into list of series for input to clustering function
-   Choosing the clustering method: "partitional", "hierarchical", "tadpole" or "fuzzy"
-   Choosing distance computation: Ignored for type = "tadpole".
-   Determining a measure to quantify the similarity between observations
-   Selecting the desired number of clusters

## Clustering of stations

We will use the variable `temp_data` , and perform cluster analysis of time series of daily temperature readings from different weather stations for the same period.

### Format data into list of series

Users should be allowed to cluster by:

-   Stations, for multiple stations and multiple years
-   Months, for a single station and a given year

#### For multiple stations and multiple years, by station

```{r}
# Extract the target variable, temperature data into a variable
temp_data <- weather_data %>%
  select(c(Station, Date, Year, Month, Day, `Mean Temperature (°C)`))

# Filter for all stations and years 
stations_selected = unique(weather_data$Station) # note: not station_selected
years_selected = unique(weather_data$Year) # note: not stations_selected
station_temp_data <- temp_data %>% 
  filter(Station %in% stations_selected) %>%
  filter(Year %in% years_selected)


# Group-wise (Station-by-Station) Normalization, applying Min-Max scaling within each station group
station_temp_data <- station_temp_data %>%
  group_by(Station) %>%
  mutate(Normalized_Temp = (`Mean Temperature (°C)` - min(`Mean Temperature (°C)`, na.rm = TRUE)) / 
                            (max(`Mean Temperature (°C)`, na.rm = TRUE) - min(`Mean Temperature (°C)`, na.rm = TRUE))) %>%
  ungroup()


# Ensure the data is ordered by Station and by Date
station_temp_data <- station_temp_data %>%
  arrange(Station, Date)

# Format data into list of series, by Station
list_of_series <- split(station_temp_data$Normalized_Temp, station_temp_data$Station)
```

#### For a single selected station and year, by months

```{r}
# Extract the target variable, temperature data into a variable
temp_data <- weather_data %>%
  select(c(Station, Date, Year, Month, Month_Name, Day, `Mean Temperature (°C)`))

# Filter for station(s) and year(s) e.g., "Changi", for 2023
stations_selected = "Changi"
years_selected = "2021"
station_temp_data <- temp_data %>% 
  filter(Station %in% stations_selected) %>%
  filter(Year %in% years_selected)

# Ensure the data is ordered by Month_Name and by Date
station_temp_data <- station_temp_data %>%
  arrange(Month_Name, Date)

# Format data into list of series, by Month_Name
list_of_series <- split(station_temp_data$`Mean Temperature (°C)`, station_temp_data$Month_Name)
```

### Varying clustering method

#### Hierarchical

Assume clustering for several stations across 2021 - 2023.

~~Assume that users are trying to perform clustering for a single selected station and year, by months.~~

```{r}
n_cluster = 5 # Number of desired clusters. Should not show if cluster_type == "partitional"
cluster_type = "hierarchical" #  "partitional", "hierarchical", "tadpole" or "fuzzy"
distance = "dtw_basic" # Ignored for type = "tadpole"
control = hierarchical_control(method = "complete") 

c <- tsclust(series = list_of_series, 
        type = cluster_type,  
        k = n_cluster, 
        distance = distance, 
        control = control
        )

p <- fviz_dend(c, k = n_cluster, # Cut in n_cluster groups
          cex = 0.5, # label size
          k_colors = c("jco"),
          color_labels_by_k = FALSE,  # color labels by groups
          rect_border = "jco",
          rect = TRUE,
          rect_fill = TRUE)
p
```

# Forecasting of grouped time series

Say we have the following groups:\
![](images/clipboard-2703185754.png)

We will attempt to apply forecasting models to these groups.

[Source](https://cran.rstudio.com/web/packages/sweep/vignettes/SW01_Forecasting_Time_Series_Groups.html)

The forecasting workflow involves a few basic steps:

1.  Step 1: Coerce to a `ts` object class.

2.  Step 2: Apply a model (or set of models)

3.  Step 3: Forecast the models (similar to predict)

4.  Step 4: Tidy the forecast

# Spatial Interpolation

## Data Preparation

### Aggregate data into monthly rainfall

```{r}
selected_var = "Daily Rainfall Total (mm)"

variable_data <- weather_data %>% 
  group_by(Station) %>% # Group by station
  summarise(MONTHSUM = sum()) %>%
  ungroup()
```

# UI Design

This module will contain three tabs:

-   Horizon Plot
-   Clustering of time series
-   Forecasting of grouped time series

## Tab 1: Horizon Plot

\<to be updated\>

![](images/clipboard-3800135536.png)

```{r}

```

## Tab 2: Clustering

\<to be updated\>

![](images/clipboard-2326084344.png)

## Tab 3: Forecasting

\<to be updated\>

# References

-   [Time series clustering](https://geomoer.github.io/moer-mpg-data-analysis/unit10/unit10-03_time_series_clustering.html)
-   https://plotly.com/ggplot2/dendrogram/
-   https://www.rdocumentation.org/packages/factoextra/versions/1.0.7/topics/fviz_dend
