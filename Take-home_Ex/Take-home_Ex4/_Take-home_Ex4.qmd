---
title: "Take-home Exercise 4"
subtitle: "Prototyping Modules for Visual Analytics Shiny Application"
date: February 25, 2024
date-modified:  last-modified
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: true
    
execute: 
  eval: true
  echo: true
  warning: false  
---

# Overview

In this exercise, I will use a module of the Shiny application for the Group Project component to fulfill the following objectives:

-   To evaluate and determine what are the necessary R packages needed for the Shiny application supported in R CRAN,

-   To prepare and test the specific R codes can be run and returned the correct output as expected,

-   To determine the parameters and outputs that will be exposed on the Shiny applications, and

-   To select the appropriate Shiny UI components for exposing the parameters determined above.

My submission includes:

-   The prototype module report, that provides detailed discussion and explanation of:

    -   the **data preparation** process,

    -   the selection of **data visualisation techniques** used,

    -   and the data visualisation design and interactivity principles and best practices implemented.

-   The proposed UI design for the different components of the UI.

# Project details

For our project, we aim to create a Shiny app with user-friendly functionalities, to effectively visualize and analyze climate data.

We will use the following data:

| Cleaned Dataset | Description                                    | Period    | Source of raw data                                    |
|-----------------|-----------------|-----------------|---------------------|
| *weather_data*  | Historical climate data for 7 weather stations | 2021-2023 | <http://www.weather.gov.sg/climate-historical-daily/> |

The R Shiny app will consists of four sections:

-   Homepage tab: Users have an overview of the dataset used in application. It will include a map of Singapore and interactivity elements that allow users to view the dataset at different points in time.
-   EDA and CDA tab: Users can explore the distribution and trends in the dataset for specific periods or locations (station or region), and use statistical analysis to confirm the trends.
-   Time series analysis: Users can explore the time series decomposition of the different variables, and select the type of model that they would like to use for univariate time series forecasting.
-   Clustering time series analysis: Users can explore grouping stations with similar weather patterns or grouping time periods with similar patterns. The user would then be able to choose different models to forecast the grouped data.

For this exercise, we will focus on the last module.

# Getting started

## Load packages

First, we load packages required:

-   **tidyverse**: this package includes a variety of R packages such as =**ggplot2** and **dplyr**. the packages will be used to support tasks such as reading in packages or data manipulation or plotting

-   **naniar**: for using *miss_vis()* function to check data for missing values

-   **imputeTS**: for using *na_ma()* function to impute missing values

-   **DT**: for using *datatable()* to view the dataset interactively

-   **lubridate**: for handling date-time formats

```{r}
pacman::p_load(tidyverse, naniar,imputeTS, DT, lubridate,
               ggplot2, patchwork, ggthemes,
               tseries, ggHoriPlot)

# pacman::p_load(ggplot2, patchwork, 
#                ggridges, ggdist, ggstatsplot,
#                plotly, ggiraph, ggdist, 
#                ungeviz, crosstalk, 
#                viridis)
```

Details of dataset:

| Dataset        | Description                                     | Period    | Source of raw data                                    |
|-----------------|-----------------|-----------------|---------------------|
| *weather_data* | Historical climate data for 63 weather stations | 2014-2023 | <http://www.weather.gov.sg/climate-historical-daily/> |

# Data Preparation

## Import data

```{r}
#| eval: false
weather_data <- read_csv("data/climate_historical_daily_records.csv")
```

## Overview of data preparation

\<to be updated\>

## Save cleaned data to .rds

\<to be updated\>

```{r}

```

## Import cleaned data

```{r}
weather_data <- read_rds("data/weather_imputed.rds") 
```

#### Details of the cleaned datasets:

| Cleaned Dataset | Description                                    | Period    | Source of raw data                                    |
|-----------------|-----------------|-----------------|---------------------|
| *weather_data*  | Historical climate data for 7 weather stations | 2021-2023 | <http://www.weather.gov.sg/climate-historical-daily/> |

# Climate data: *weather_data*

Let's look at the structure of the data.

```{r}
str(weather_data)
```

Let's summarise some details about the data:

```{r}
# | code-fold: true
# Check number of stations
cat(sprintf("There are %d stations", n_distinct(weather_data$Station)))

unique(weather_data$Station)

# Check time period of data
time_period_start <- min(weather_data$Date)
time_period_end <- max(weather_data$Date)
cat("\nThe time period of the filtered dataset is from", format(time_period_start, "%Y-%m-%d"),"to", format(time_period_end, "%Y-%m-%d"), "\n")

```

-   There are 7 stations: Ang Mo Kio, Changi, Choa Chu Kang (South), East Coast Parkway, Jurong (West), Pulau Ubin, Seletar
-   The time period of the filtered dataset is from 2021-01-01 to 2023-12-31.
-   There are two main variables we can focus on for time series analysis:
-   Daily Rainfall Total (mm)
-   Mean Temperature (°C)

## UNIVARIATE TIME SERIES: Exploratory Data Analysis: Daily Rainfall Total (mm). For Ang Mo Kio only.

Extract the rainfall data into a variable *rain_data*:

```{r}
rain_data <- weather_data %>%
  select(c(Station, Date, `Daily Rainfall Total (mm)`, LAT, LONG))

str(rain_data)
```

```{r}
# Filter for a single station, e.g., "Ang Mo Kio"
ang_mo_kio_data <- rain_data %>% 
  filter(Station == "Ang Mo Kio")
```

### Time series plot:

```{r}
# Plotting Mean Temperature as an example
ggplot(ang_mo_kio_data, aes(x = Date, y = `Daily Rainfall Total (mm)`)) +
  geom_line() + 
  labs(title = "Daily Rainfall Total (mm) Over Time at Ang Mo Kio", x = "Date", y = "Daily Rainfall Total (mm)") +
  theme_minimal()
```

### Seasonality and Trend Analysis

Done using the `stl()` function for seasonal-trend decomposition using LOESS.

```{r}
ts_data <- ts(ang_mo_kio_data$`Daily Rainfall Total (mm)`, frequency = 365)

decomposed_data <- stl(ts_data, s.window = "periodic")
plot(decomposed_data)
```

### Autocorrelation Analysis

To help with identifying how values are related to their lagged versions.

```{r}
acf(ts_data)
pacf(ts_data)
```

### Stationarity Check

Many forecasting models assume that the time series is stationary. Use the Augmented Dickey-Fuller (ADF) test to check for stationarity.

```{r}
adf.test(ts_data, alternative = "stationary")
```

### Distribution of the Variable

Examine the distribution of your variable to identify any skewness, kurtosis, or outliers.

```{r}
ggplot(ang_mo_kio_data, aes(x = `Daily Rainfall Total (mm)`)) +
  geom_histogram(bins = 30, fill = "blue", color = "black") +
  labs(title = "Distribution of Daily Rainfall at Ang Mo Kio", x = "Daily Rainfall Total (mm)", y = "Frequency") +
  theme_minimal()
```

## UNIVARIATE TIME SERIES: Exploratory Data Analysis: Mean Temperature (°C). For Ang Mo Kio only.

Extract the temperature data into a variable *temp_data*:

```{r}
temp_data <- weather_data %>%
  select(c(Station, Date, `Mean Temperature (°C)`, LAT, LONG))

str(temp_data)
```

```{r}
# Filter for a single station, e.g., "Ang Mo Kio"
ang_mo_kio_data <- temp_data %>% 
  filter(Station == "Ang Mo Kio")
```

### Time series plot:

```{r}
# Plotting Mean Temperature as an example
ggplot(ang_mo_kio_data, aes(x = Date, y = `Mean Temperature (°C)`)) +
  geom_line() + 
  labs(title = "Mean Temperature (°C) Over Time at Ang Mo Kio", x = "Date", y = "Mean Temperature (°C)") +
  theme_minimal()
```

### Seasonality and Trend Analysis

Done using the `stl()` function for seasonal-trend decomposition using LOESS.

```{r}
ts_data <- ts(ang_mo_kio_data$`Mean Temperature (°C)`, frequency = 365)

decomposed_data <- stl(ts_data, s.window = "periodic")
plot(decomposed_data)
```

### Autocorrelation Analysis

To help with identifying how values are related to their lagged versions.

```{r}
acf(ts_data)
pacf(ts_data)
```

### Stationarity Check

Many forecasting models assume that the time series is stationary. Use the Augmented Dickey-Fuller (ADF) test to check for stationarity.

```{r}
adf.test(ts_data, alternative = "stationary")
```

### Distribution of the Variable

Examine the distribution of your variable to identify any skewness, kurtosis, or outliers.

```{r}
ggplot(ang_mo_kio_data, aes(x = `Mean Temperature (°C)`)) +
  geom_histogram(bins = 30, fill = "blue", color = "black") +
  labs(title = "Distribution of Mean Temp at Ang Mo Kio", x = "Mean Temperature (°C)", y = "Frequency") +
  theme_minimal()
```

### CLUSTERING EDA: Mean_Temperature

To find similar patterns among stations, you might first perform a clustering analysis (e.g., using hierarchical clustering or k-means on station averages) and then visualize the clusters.

```{r}
# Example: Hierarchical Clustering on Average Temperature by Station
# Compute average temperature per station first
avg_temp <- weather_data %>%
            group_by(Station) %>%
            summarize(Avg_Temp = mean(`Mean Temperature (°C)`, na.rm = TRUE))
# Hierarchical Clustering
dist_matrix <- dist(avg_temp$Avg_Temp)
hc <- hclust(dist_matrix)
plot(hc)
```

### HORIZON PLOT: Mean Temperature (°C) across different weather stations (2021 - 2023)

```{r}
weather_data %>% 
  ggplot() +
  geom_horizon(aes(x = Date, y=`Mean Temperature (°C)`), 
               origin = "midpoint", 
               horizonscale = 6)+
  facet_grid(`Station`~.) +
    theme_few() +
    scale_fill_hcl(palette = 'RdBu') +
  theme(panel.spacing.y=unit(0, "lines"), strip.text.y = element_text(
    size = 5, angle = 0, hjust = 0),
    legend.position = 'none',
    axis.text.y = element_blank(),
    axis.text.x = element_text(size=7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
    scale_x_date(expand=c(0,0), date_breaks = "3 month", date_labels = "%b%y") +
  ggtitle('Mean Temperature (°C) across different weather stations (2021 - 2023)')
```

### HORIZON PLOT: Daily Rainfall Total across all weather stations from 2021 to 2023

This plot may not make sense as we may need to sum up rainfall for each day across all weather stations first before plotting.

```{r}
# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data %>% 
  mutate(
    outlier = between(
      `Daily Rainfall Total (mm)`, 
      quantile(`Daily Rainfall Total (mm)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Daily Rainfall Total (mm)`, na.rm = TRUE),
      quantile(`Daily Rainfall Total (mm)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Daily Rainfall Total (mm)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Daily Rainfall Total (mm)`))/2
sca <- seq(range(cutpoints$`Daily Rainfall Total (mm)`)[1], 
           range(cutpoints$`Daily Rainfall Total (mm)`)[2], 
           length.out = 7)[-4]

round(ori, 2) # The origin
round(sca, 2) # The horizon scale cutpoints


# Step 2: Ensure data has Year, Month, Date column. Also create a Date_mine column for comparing across years
weather_data <- weather_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date)) %>%
  mutate(Date_mine = make_date(2023, month(Date), day(Date)))

# Step 3: Plot horizon plot
weather_data %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Daily Rainfall Total (mm)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Year ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Daily Rainfall Total across all weather stations', 
          'from 2021 to 2023')

```

### HORIZON PLOT: Mean Temperature (°C) across across all weather stations from 2021 to 2023

This plot may not make sense as we may need to average the `Mean Temperature (°C)` across all stations for each day first before plotting. Or does this plot already consider the average across all stations for each day?

```{r}
#| fig-width: 10
#| fig-height: 4
# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data %>% 
  mutate(
    outlier = between(
      `Mean Temperature (°C)`, 
      quantile(`Mean Temperature (°C)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE),
      quantile(`Mean Temperature (°C)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Mean Temperature (°C)`))/2
sca <- seq(range(cutpoints$`Mean Temperature (°C)`)[1], 
           range(cutpoints$`Mean Temperature (°C)`)[2], 
           length.out = 7)[-4]

round(ori, 2) # The origin
round(sca, 2) # The horizon scale cutpoints

# Step 2: Ensure data has Year, Month, Date column. Also create a Date_mine column for comparing across years
weather_data <- weather_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date)) %>%
  mutate(Date_mine = make_date(2023, month(Date), day(Date)))

# Step 3: Plot horizon plot
weather_data %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Mean Temperature (°C)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Year ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Mean Temperature (°C) across across all weather stations', 
          'from 2021 to 2023')
```

### HORIZON PLOT: Mean Temperature (°C) For Ang Mo Kio across the years

```{r}
#| fig-width: 10
#| fig-height: 4
# Step 0: Filter for specified station only 
ang_mo_kio_data <- weather_data %>% 
  filter(Station == "Ang Mo Kio")

# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- ang_mo_kio_data %>% 
  mutate(
    outlier = between(
      `Mean Temperature (°C)`, 
      quantile(`Mean Temperature (°C)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE),
      quantile(`Mean Temperature (°C)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Mean Temperature (°C)`))/2
sca <- seq(range(cutpoints$`Mean Temperature (°C)`)[1], 
           range(cutpoints$`Mean Temperature (°C)`)[2], 
           length.out = 7)[-4]

round(ori, 2) # The origin
round(sca, 2) # The horizon scale cutpoints

# Step 2: Ensure data has Year, Month, Date column. Also create a Date_mine column for comparing across years
ang_mo_kio_data <- ang_mo_kio_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date)) %>%
  mutate(Date_mine = make_date(2023, month(Date), day(Date)))

# Step 3: Plot horizon plot
ang_mo_kio_data %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Mean Temperature (°C)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Year ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Mean Temperature (°C) For Ang Mo Kio',
          'across the years 2021 to 2023')
```

### HORIZON PLOT: Temperature across the stations for a specified year

```{r}
#| fig-width: 10
#| fig-height: 4
# Ensure data has Year, Month, Date column
weather_data <- weather_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date))

# Filter for specified year only
weather_data_2023 <- weather_data %>% 
  filter(Year == 2023)

# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data_2023 %>% 
  mutate(
    outlier = between(
      `Mean Temperature (°C)`, 
      quantile(`Mean Temperature (°C)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE),
      quantile(`Mean Temperature (°C)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Mean Temperature (°C)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Mean Temperature (°C)`))/2
sca <- seq(range(cutpoints$`Mean Temperature (°C)`)[1], 
           range(cutpoints$`Mean Temperature (°C)`)[2], 
           length.out = 7)[-4]

round(ori, 2) # The origin
round(sca, 2) # The horizon scale cutpoints

# Plot horizon plot
weather_data_2023 %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Mean Temperature (°C)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Station ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Mean Temperature (°C) for the year 2023',
          'across the stations')
```

### HORIZON PLOT: Rainfall across the stations for a specified year

```{r}
# Ensure data has Year, Month, Date column
weather_data <- weather_data %>% 
  mutate(Year = year(Date)) %>%
  mutate(Month = month(Date)) %>%
  mutate(Day = day(Date))

# Filter for specified year only
weather_data_2023 <- weather_data %>% 
  filter(Year == 2023)

# Step 1: compute origin and  horizon scale cutpoints: 
cutpoints <- weather_data_2023 %>% 
  mutate(
    outlier = between(
      `Daily Rainfall Total (mm)`, 
      quantile(`Daily Rainfall Total (mm)`, 0.25, na.rm = TRUE) -
        1.5 * IQR(`Daily Rainfall Total (mm)`, na.rm = TRUE),
      quantile(`Daily Rainfall Total (mm)`, 0.75, na.rm = TRUE) +
        1.5 * IQR(`Daily Rainfall Total (mm)`, na.rm = TRUE))) %>% 
  filter(outlier)

ori <- sum(range(cutpoints$`Daily Rainfall Total (mm)`))/2
sca <- seq(range(cutpoints$`Daily Rainfall Total (mm)`)[1], 
           range(cutpoints$`Daily Rainfall Total (mm)`)[2], 
           length.out = 7)[-4]

round(ori, 2) # The origin
round(sca, 2) # The horizon scale cutpoints

# Plot horizon plot
weather_data_2023 %>% ggplot() +
  geom_horizon(aes(x = Date_mine, 
                   y = `Daily Rainfall Total (mm)`,
                   fill = after_stat(Cutpoints)), 
               origin = ori, horizonscale = sca) +
  scale_fill_hcl(palette = 'RdBu', reverse = T) +
  facet_grid(~Station ~ .) +
  theme_few() +
  theme(
    panel.spacing.y = unit(0, "lines"),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand = c(0, 0), 
               date_breaks = "1 month", 
               date_labels = "%b") +
  xlab('Date') +
  ggtitle('Daily Rainfall Total (mm) for the year 2023',
          'across the stations')
```
