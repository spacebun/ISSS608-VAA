[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This exercise introduces the basic principles and essential components of ggplot2 package, which is based on the Layered Grammar of Graphics. Here, we present some ways that this package can be used to plot a variation of elegant and functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "2 Getting started",
    "text": "2 Getting started\n\n2.1 Loading libraries\nThe required R package for this exercise is tidyverse.\n\npacman::p_load(tidyverse)\n\n\n\n2.2 Importing data\nThe data used is the year end examination grades of a cohort of primary 3 students from a local school.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nA brief exploration of the data shows that:\n\nUsing dim, we see that the data has 322 rows (entries) and 7 columns (attributes).\nUsing str, we see which attributes are categorical (of class chr) and which are continuous (of class num).\n\n\ndim(exam_data)\n\n[1] 322   7\n\nstr(exam_data)\n\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr>"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#introducing-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "3 Introducing ggplot",
    "text": "3 Introducing ggplot\nThis package is part of the tidyverse family, specifically used for visual exploration.\nFor more detail, visit ggplot2 link.\nBelow, we present a quick comparison between a boxplot plotted with R Graphics and with ggplot. Charts customized by referring to https://r-charts.com/.\n\nR Graphicsggplot2\n\n\n\nboxplot(exam_data$ENGLISH, \n        main = \"Distribution of English scores\",\n        xlab = \"ENGLISH\",\n        ylab = \"Score\",\n        col = \"#30638E\")\n\n\n\n\n\n\n\nggplot(exam_data, aes(x=\"\", y = ENGLISH)) + \n  stat_boxplot(geom = \"errorbar\",\n               width = 0.15) + \n  geom_boxplot(fill=\"#30638E\",\n               color = \"black\") +\n  ggtitle(\"Distribution of English scores\") +\n  theme(panel.background = element_rect(fill = \"grey\")) +\n  labs(x = \"ENGLISH\", y = \"Score\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "4 Grammar of Graphics",
    "text": "4 Grammar of Graphics\nggplot is an implementation of Leland Wilkinson’s Grammar of Graphics.\nThere are two principles in Grammar of Graphics:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nThe table below describes the seven grammars of ggplot2.\n\n\n\n\n\n\n\nBuilding Block\nDescription\n\n\n\n\nData\nThe dataset being plotted.\n\n\nAesthetics\nMap data attributes to visual properties like position, color, size, shape, and transparency\n\n\nGeometric\nVisual elements such as point / bar / line\n\n\nFacets\nDivide data into subsets for parallel displays of graphs (also known as paneling)\n\n\nStatistics\nStatistical summaries such as averages or confidence intervals\n\n\nCoordinate Systems\nPlane of data mapped on the graphic\n\n\nThemes\nCustomize non-data plot elements like titles, axis labels, and legend aesthetics"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#essential-grammatical-elements-in-ggplot2",
    "title": "Hands-on Exercise 1",
    "section": "5 Essential Grammatical Elements in ggplot2",
    "text": "5 Essential Grammatical Elements in ggplot2\nIn this section, we explore all of the grammatical elements.\n\n5.1 Data and Aesthetics\nLearning points:\n\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nThe aes() function is used to specify all aesthetics of the plot\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\n\n\n\nggplot(data=exam_data, aes(x=\"ENGLISH\"))\n\n\n\n\n\n5.1.1 Defining aes in ggplot() or in geom objects\nWhile we can define aes within ggplot()() function, each geom layer can also have its own aes specification.\nIn this code chunk, we plot two layers geom_smooth() and geom_point.The aesthetics are defined globally in the ggplot() function. The geom_point() layer will inherit these aesthetics automatically.\n\n# ggplot(data=exam_data, aes(x = ENGLISH, y = SCIENCE)) +\n#   geom_point() +\n#   geom_smooth()\n\nggplot(data=exam_data, aes(x = ENGLISH, y = SCIENCE)) +\n  geom_smooth() +\n  geom_point()\n\n\n\n\nIn this code chunk, the aesthetics are defined within geom_smooth(). The geom_point() layer will not inherit these aesthetics and will need them specified separately.\n\nggplot(data=exam_data) +\n  geom_smooth(aes(x = ENGLISH, y = SCIENCE),\n              method = \"lm\") +\n  geom_point(aes(x = ENGLISH, y = SCIENCE, colour = RACE))\n\n\n\n\n\n\n\n5.2 Geometric Objects\nLearning points:\n\nGeometric objects are the actual marks we put on a plot.\nA plot must have at least one geom. Add a geom using + operator.\n\nThe image shows some examples of geometric objects that we can put on a plot.\n\nOther examples include geom_smooth (for drawing smoothed lines), geom_bar (for drawing bars), geom_polygon (for drawing arbitrary shapes), geom_map (for drawing polygons in the shape of a map).\nFor complete list, please refer to here.\n\n5.2.1 geom_bar()\ngeom_bar() can be used to plot bar charts.\nBy default, this function counts the number of occurrences for each level of a categorical variable. The code chunk below demonstrates how the function counts the occurrences of each level (Male/Female) of the categorical variable GENDER.\n\nggplot(data=exam_data, \n       aes(x=GENDER)) +\n  geom_bar()\n\n\n\n\nIf your data already contains the count for each group, you will need to pass stat = \"identity\" inside geom_bar. The code chunk below demonstrates this using a different dataframe that already contains the counts of males and females in a cohort.\n\ngender_data <- data.frame(GENDER = c(\"Male\", \"Female\"), count = c(152, 170))\n\ngender_data\n\n  GENDER count\n1   Male   152\n2 Female   170\n\nggplot(gender_data, aes(x = GENDER, y = count)) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n5.2.2 geom_dotplot()\ngeom_dotplot can be used to plot dot plots.\nThe width of a dot corresponds to the bin width (or maximum width). The dots are stacked, with each dot representing one observation.\nHowever, the y scale can be misleading due to technical limitations of ggplot2.\n\nscale_y_continuous() can be used to turn off the y-axis\nbinwidth argument can be used to change the binwidth\n\nThe dotplot below illustrates the distribution of scores for ENGLISH across the cohort. Each dot represents a student’s score, while the X axis denotes the range of scores achieved.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\nHere we remove the misleading y-axis and change the binwidth to 2.5.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)\n\n\n\n\n\n\n5.2.3 geom_histogram()\ngeom_histogram() creates histograms.\nIn this section, we also demonstrate how a geometric object can be modified by changing geom() and aes().\n\nSimple HistogramChanging geom()Changing aes()\n\n\nWe first plot a simple histogram of the ENGLISH scores.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram() \n\n\n\n\n\n\nIn this code chunk, we change geom() in the following ways:\n\nbins argument is used to change the number of bins to 15\nfill argument is used to shade the histogram\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH)) +\n  geom_histogram(bins=15, \n                 fill=\"#30638E\",\n                 color=\"black\")  \n\n\n\n\n\n\nWe can also visualize the distribution based on the categories of GENDER. Using aes(), we add the GENDER variable to the fill argument.\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           fill = GENDER)) +\n  geom_histogram(bins=15,\n                 color =\"black\")\n\n\n\n\n\n\n\n\n\n5.2.4 geom_density()\ngeom-density()computes and plots kernel density estimate. It is an alternative to the histogram, for continuous data that comes from an underlying smooth distribution.\n\nKernel density estimateChanging aes()\n\n\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_density()           \n\n\n\n\n\n\nWe can change aes() by adding the GENDER variable to the colour argument. The density plot will display different colors for the density lines of male and female students.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n5.2.5 geom_boxplot\ngeom_boxplotdisplays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nBox PlotBox Plot with Notches\n\n\nThe code chunk plots a boxplot that compares the distribution of ENGLISH scores across different categories of GENDER.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\nNotches help visually assess whether the medians of distributions differ.\nIf the notches do not overlap, this is evidence that the medians are different.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n5.2.6 geom_violin\ngeom_violin is used to create violin plots that compare multiple data distributions side by side.\nThe code chunk below plots the distribution of ENGLISH score by GENDER in violin plot.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n5.2.7 geom_point()\ngeom_point() is useful in creating scatter plots.\nThe scatterplot below shows the ENGLISH and SCIENCE scores of the cohort.\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point()            \n\n\n\n\n\n\n5.2.8 geom objects can be combined\nThe code chunk below plots the data points on the violin plots by using both geom_violin() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_violin() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)          \n\n\n\n\n\n\n\n5.3 Statistics\nLearning points:\n\nBy adding stat_() functions, we can statistically transform data, usually as some form of summary. This overrides the default geom.\nBy adding geom_() functions, we can override the default stat.\n\n\nBox Plot without MeanWorking with stat - the stat_summary() methodWorking with stat - the geom() method\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary().\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = ENGLISH, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n5.3.1 Adding a best fit curve on a scatterplot\nWe can improve the interpretability of a scatterplot graph by adding a best fit curve.\nThis can be done using geom_smooth().\n\nThe default smoothing method used is loess.\nThis can be overridden by adding the method argument. See here for details.\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n5.4 Facets\nLearning points:\n\nFaceting creates a series of small, individual plots, with each representing a specific subset of the data. This technique serves as alternative to using aesthetics when visualizing additional discrete variables.\nggplot2 supports two types of factes, namely: facet_wrap and facet_grid().\n\n\n5.4.1 facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nggplot(data=exam_data, \n       aes(x= ENGLISH)) +\n  geom_histogram(bins=15) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n5.4.2 facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\nggplot(data=exam_data, \n       aes(x= ENGLISH)) +\n  geom_histogram(bins=15) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n5.5 Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n5.5.1 coord_flip()\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nWe can flip the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n5.5.2 coord_cartesian()\nThe scatterplot below is slightly misleading because the y-axis and x-axis ranges are not equal.\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, y=SCIENCE)) +\n  geom_point() +\n  geom_smooth(method=lm, linewidth=0.5)\n\n\n\n\nWe can use coord_cartesian() to fix the range of both the y-axis and x-axis, to range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, y=SCIENCE)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n5.6 Themes\nLearning Points:\n\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nEach theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\nRefer to this link for a list of themes.\n\ntheme_gray()theme_bw()theme_void()\n\n\nThis is also the default theme.\n\nggplot(data=exam_data) +\n  geom_point(aes(x = ENGLISH, y = SCIENCE, colour = RACE)) +\n  theme_gray()\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = ENGLISH, y = SCIENCE, colour = RACE)) +\n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = ENGLISH, y = SCIENCE, colour = RACE)) +\n  geom_point() +\n  theme_void()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#references",
    "title": "Hands-on Exercise 1",
    "section": "6 References",
    "text": "6 References\n\nR for Visual Analytics: A Layered Grammar of Graphics: ggplot2 methods.\nggplot2 - Tidyverse\nR CHARTS"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercises I will practice using ggplot2 to create elegant and effective statistical graphics, achieving the following:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1: Now You See It",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)\n\n\n\n\n\n\n\nNote\n\n\n\npacman::p_load(tidyverse, haven) is calling the pacman package, since we have not yet loaded this package. If pacman package was already loaded, we can load tidyverse and haven with p_load(tidyverse, haven)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "spacebun",
    "section": "",
    "text": "ISSS608 Visual Analytics and Applications\nWelcome to my portfolio for the Visual Analytics and Applications course, taught by Prof. Kam Tin Seong. This website is a collection of exercises and assignments completed throughout the course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "1 Nothing here yet"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now You See It",
    "section": "2 Importing PISA data",
    "text": "2 Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq <- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe code chunk below filters the data where country code (CNT) is Singapore (SGP).\n\nstu_qqq_SG <- stu_qqq %>% \n  filter(CNT == \"SGP\")\n\nThe code chunk below then saves this filtered data as an RData file. This smaller file can be used in the future.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\nTo load this file in the future, follow the code in the code chunk below.\n\nstu_qqq_SG <- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "2 Getting started",
    "text": "2 Getting started\n\n2.1 Loading libraries\nThe following libraries will be used\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n2.2 Importing data\nThe data used is the year end examination grades of a cohort of primary 3 students from a local school. From Hands-On Exercise 1, we know that the data has:\n\nFour categorical attributes: ID, CLASS, GENDER, RACE\nThree continuous attributes: MATHS, ENGLISH, SCIENCE\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#using-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#using-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "3 Using ggrepel",
    "text": "3 Using ggrepel\nAnnotation of statistical graphs can be done by using text geoms like geom_text() or geom_label() (has rectangle behind the text) as shown below.\n\nPlot with geom_text()Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_label(mapping = aes(label = ID)) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")\n\n\n\n\n\nPlot with geom_label()Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_text(mapping = aes(label = ID)) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#code",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#code",
    "title": "Hands-on Exercise 2",
    "section": "5 Code",
    "text": "5 Code\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_label(mapping = aes(label = ID)) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")\n\n\nPlot with geom_label()Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_text(mapping = aes(label = ID)) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#plot-with-geom_text",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#plot-with-geom_text",
    "title": "Hands-on Exercise 2",
    "section": "4 Plot with geom_text()",
    "text": "4 Plot with geom_text()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#annotation-of-plots",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#annotation-of-plots",
    "title": "Hands-on Exercise 2",
    "section": "3 Annotation of plots",
    "text": "3 Annotation of plots\n\n3.1 Using Text geoms in ggplot2\nAnnotation of statistical graphs can be done by using text geoms like geom_text() or geom_label() (has rectangle behind the text) as shown below.\n\nPlot with geom_text()Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_text(mapping = aes(label = ID)) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")\n\n\n\n\n\nPlot with geom_label()Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_label(mapping = aes(label = ID)) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")\n\n\n\n\n\n\n3.2 Using ggrepel\nggrepel helps to repel overlapping text. Simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel().\n\nPlot with geom_text_repel()Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_text_repel(mapping = aes(label = ID)) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")\n\n\n\n\n\nPlot with geom_label_repel()Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y=SCIENCE)) +\n  geom_point() +\n  geom_label_repel(mapping = aes(label = ID),\n                   max.overlaps = getOption(\"ggrepel.max.overlaps\", default = 20)) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote how when there are too many data points (320 in this case), the labels that overlap cannot be labeled. Consider varying the number of overlaps allowed in the option for max.overlaps. The default value is 10."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#themes",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#themes",
    "title": "Hands-on Exercise 2",
    "section": "4 Themes",
    "text": "4 Themes\n\n4.1 ggplot2 themes\nAs explored in Hands-on Exercise 1, there are several themes in ggplot2. Below is an example.\n\nPlotThe code\n\n\nUsing theme_bw() theme.\n\n\n\n\n\n\n\n\nggplot(data=exam_data) +\n  geom_point(aes(x = ENGLISH, y = SCIENCE, colour = RACE)) +\n  theme_bw() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores, with race perspective\")\n\n\n\n\n\n\n4.2 Using ggthemes\nThe list of themes available from the ggthemes() package can be found at this link.\n\nPlotThe code\n\n\nUsing theme_fivethirtyeight().\n\n\n\n\n\n\n\n\nggplot(data=exam_data) +\n  geom_point(aes(x = ENGLISH, y = SCIENCE, colour = RACE)) +\n  theme_economist() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores, with race perspective\")\n\n\n\n\n\n\n4.3 Using hrbthemes\nWith this package we can edit typographic elements such as placement of labels or fonts used.\n\nUsing hrbthemesThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data) +\n  geom_point(aes(x = ENGLISH, y = SCIENCE, colour = RACE)) +\n  theme_ipsum_rc(axis_title_size = 12,\n                 plot_title_size = 14,\n              base_size = 10,\n              grid = \"XY\") +  # gridlines for X and Y axis\n  ggtitle(\"Science scores versus English scores, with race perspective\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "5 Beyond Single Graph",
    "text": "5 Beyond Single Graph\n\n5.1 Create individual plots\nWe will create the following plots:\n\nDistribution of Science scores\nDistribution of English scores\nScatterplot for Science score versus English score\n\n\nPlot 1Plot 2Plot 3\n\n\n\np1 <- ggplot(data=exam_data, \n             aes(x = SCIENCE)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Science scores\")\n\np1\n\n\n\n\n\n\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\n\n\np3 <- ggplot(data=exam_data, \n       aes(x = ENGLISH, y = SCIENCE)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Science scores versus English scores\")\n\np3\n\n\n\n\n\n\n\n\n\n5.2 Creating Composite Graphics: pathwork methods\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\nCombining two plotsCombining three plotsAdding tagUse inset_element()Adding ggthemes\n\n\n\np1+p2\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\nObserve that the plots are now numbered by Roman numerals:\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\nTo place plots freely on top or below of other plots.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#references",
    "title": "Hands-on Exercise 2",
    "section": "6 References",
    "text": "6 References\n\nR for Visual Analytics: Beyond ggplot2 Fundamentals."
  }
]