---
title: "Hands-on Exercise 3 [In-Progress] "
subtitle: "Interactivity in Visual Analytics: Principles and Methods"
date: January 22, 2024
date-modified: "last-modified"
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: false
    
execute: 
  eval: true
  echo: true
  warning: false  
---

# Programming Interactive Data Visualisation with R

## Overview

In this exercises I will learn how to create interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.

## Getting started

### Loading libraries

The following libraries will be used:

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making 'ggplot' graphics interactive.
-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.
-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.
-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
-   [**patchwork**](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```

### Importing data

The data used is the year end examination grades of a cohort of primary 3 students from a local school. From Hands-On Exercise 1, we know that the data has:

-   Four categorical attributes: ID, CLASS, GENDER, RACE
-   Three continuous attributes: MATHS, ENGLISH, SCIENCE

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## Interactive Data Visualisation - ggiraph methods

[**ggiraph**](https://davidgohel.github.io/ggiraph/) is a html widget and ggplot2 extension, that allows ggplot graphics to be interactive:

We can makes ggplot graphics interactive with the following three arguments:

-   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   **Data_id**: a column of data-sets that contain an id to be associated with elements.

-   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

### `tooltip` aesthetic

Let's first demonstrate how we can make some graphs interactive with a tooltip. 

#### Display single level tooltip

Three steps to plotting a scatter plot with tooltip that shows studeNT ID:

-   Use `geom_point_interactive()` instead of `geom_point()`
-   Provide the aesthetic *tooltip* with **ID**
-   Call function `girafe` with the ggplot object so that the graphic is translated as a web interactive graphic

::: panel-tabset

## The Plot

```{r}
#| echo: False

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = ID)) +  # Provide tooltip aesthetic
    scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive relationship betweeen Science and Maths scores",
       subtitle = "Scatter plot of science and math scores of students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass ggplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

## The Code Chunk

```{r}
#| eval: False
# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = ID)) +  # Provide tooltip aesthetic
    scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive relationship betweeen Science and Maths scores",
       subtitle = "Scatter plot of science and math scores of students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass ggplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```
:::

#### Display multiple information on tooltip

The content of the tooltip can be customised by including a list object, that is passed into the aesthetic for *tooltip*.

::: panel-tabset

## The Plot

```{r}
#| echo: False
# Create new column for tooltip information 
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS,
  "\n Race = ", exam_data$RACE)) 

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), # Pass in list object to tooltip aesthetic
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL) +
    labs(title = "Distribution of Science Scores",
       subtitle = "Dotplot",
       x = "Science Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8))

# Pass ggplot object into girafe
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

## The Code Chunk

```{r}
#| eval: False
# Create new column for tooltip information 
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS,
  "\n Race = ", exam_data$RACE)) 

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), # Pass in list object to tooltip aesthetic
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL) +
    labs(title = "Distribution of Science Scores",
       subtitle = "Dotplot",
       x = "Science Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8))

# Pass ggplot object into girafe
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```
:::

#### Customize tooltip style

We can use `opts_tooltip()` to further customize the tooltip, such as changing opacity of background, or adding css declarations.


::: panel-tabset

## The Plot

```{r}
#| echo: False
# Create new column for tooltip information
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS,
  "\n Race = ", exam_data$RACE)) 

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL) +
    labs(title = "Distribution of Science Scores",
       subtitle = "Dotplot",
       x = "Science Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8))

# Create object for tooltip styling
tooltip_css <- "background-color:#93c7c2; #<<
font-style:bold; color:#464646;" #<<

# Pass ggplot object and tooltip styling into girafe
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)   
```

## The Code Chunk

```{r}
#| eval: False
# Create new column for tooltip information
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS,
  "\n Race = ", exam_data$RACE)) 

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL) +
    labs(title = "Distribution of Science Scores",
       subtitle = "Dotplot",
       x = "Science Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8))

# Create object for tooltip styling
tooltip_css <- "background-color:#93c7c2; #<<
font-style:bold; color:#464646;" #<<

# Pass ggplot object and tooltip styling into girafe
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)   
```
:::


#### Display statistics on tooltip

We can also display derived statistics. 

::: panel-tabset

## The Plot

```{r}
#| echo: False
# Create object for tooltip information  
tooltip <- function(ymin, lower, middle, upper, ymax, accuracy = .01) {
  sem <- scales::number((ymax - ymin) / 2, accuracy = accuracy) # SEM for 90% CI
  median <- scales::number(middle, accuracy = accuracy)
  lower_quartile <- scales::number(lower, accuracy = accuracy)
  upper_quartile <- scales::number(upper, accuracy = accuracy)
  
  paste("Median:", median, 
        "\n25th Quartile:", lower_quartile, 
        "\n75th Quartile:", upper_quartile,
        "\n95% CI: [", scales::number(ymin, accuracy = accuracy), 
        ", ", scales::number(ymax, accuracy = accuracy), "]")
}

# Create ggplot object
gg_boxplot <- ggplot(data = exam_data, aes(x = GENDER, y = ENGLISH)) +
  geom_boxplot_interactive(
    aes(tooltip = after_stat(tooltip(ymin, lower, middle, upper, ymax))), # Pass in after_stat of tooltip information 
    stat = "boxplot"
  ) +
  labs(title = "Boxplot of English Scores by Gender",
       x = "Gender",
       y = "English Scores")

# Pass in ggobject into girafe
girafe(ggobj = gg_boxplot,
       width_svg = 8,
       height_svg = 8*0.618)

```

## The Code Chunk

```{r}
#| eval: False
# Create object for tooltip information  
tooltip <- function(ymin, lower, middle, upper, ymax, accuracy = .01) {
  sem <- scales::number((ymax - ymin) / 2, accuracy = accuracy) # SEM for 90% CI
  median <- scales::number(middle, accuracy = accuracy)
  lower_quartile <- scales::number(lower, accuracy = accuracy)
  upper_quartile <- scales::number(upper, accuracy = accuracy)
  
  paste("Median:", median, 
        "\n25th Quartile:", lower_quartile, 
        "\n75th Quartile:", upper_quartile,
        "\n95% CI: [", scales::number(ymin, accuracy = accuracy), 
        ", ", scales::number(ymax, accuracy = accuracy), "]")
}

# Create ggplot object
gg_boxplot <- ggplot(data = exam_data, aes(x = GENDER, y = ENGLISH)) +
  geom_boxplot_interactive(
    aes(tooltip = after_stat(tooltip(ymin, lower, middle, upper, ymax))), # Pass in after_stat of tooltip information 
    stat = "boxplot"
  ) +
  labs(title = "Boxplot of English Scores by Gender",
       x = "Gender",
       y = "English Scores")

# Pass in ggobject into girafe
girafe(ggobj = gg_boxplot,
       width_svg = 8,
       height_svg = 8*0.618)

```
:::


### `data_id` aesthetic: Hover effect, and styling the hover effect

In the example below, elements associated with a data_id (i.e GENDER) will be highlighted upon mouse over.

We also demonstrate how css codes are used to customize the highlighting effect. 


::: panel-tabset

## The Plot

```{r}
#| echo: False

# Plot ggplot object
p <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(data_id = GENDER)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive Relationship between Science and Maths Scores",
       subtitle = "Scatter Plot of Science and Math Scores of Students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass ggoplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #f5bc5f;"), 
    opts_hover_inv(css = "opacity:0.2;")
  )
)

```

## The Code Chunk

```{r}
#| eval: False

# Plot ggplot object
p <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(data_id = GENDER)) +  # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive Relationship between Science and Maths Scores",
       subtitle = "Scatter Plot of Science and Math Scores of Students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass ggoplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #f5bc5f;"), 
    opts_hover_inv(css = "opacity:0.2;")
  )
)


```
:::

#### Combining tooltip and hover effect

::: panel-tabset

## The Plot

```{r}
#| echo: False

# Plot ggplot object
p <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = GENDER, # Pass in tooltip
        data_id = GENDER)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive Relationship between Science and Maths Scores",
       subtitle = "Scatter Plot of Science and Math Scores of Students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Create object for tooltip styling
tooltip_css <- "background-color:#f53b5d; #<<
font-style:bold; color:black;" #<<

# Pass ggoplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #f5bc5f;"), 
    opts_hover_inv(css = "opacity:0.2;"),
    opts_tooltip(css = tooltip_css)
  )
)

```

## The Code Chunk

```{r}
#| eval: False
# Plot ggplot object
p <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = GENDER, # Pass in tooltip
        data_id = GENDER)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive Relationship between Science and Maths Scores",
       subtitle = "Scatter Plot of Science and Math Scores of Students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Create object for tooltip styling
tooltip_css <- "background-color:#f53b5d; #<<
font-style:bold; color:black;" #<<

# Pass ggoplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #f5bc5f;"), 
    opts_hover_inv(css = "opacity:0.2;"),
    opts_tooltip(css = tooltip_css)
  )
)
```
:::

### Click effect with `onclick`

`onclick` argument of ggiraph provides hotlink interactivity on the web.


::: panel-tabset

## The Plot

```{r}
#| echo: False
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick, # Pass in onclick aesthetic
        data_id = ID),   # Pass in data_id to show hover effect before clicking in           
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618) 
```

## The Code Chunk

```{r}
#| eval: False
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick, # Pass in onclick aesthetic
        data_id = ID),   # Pass in data_id to show hover effect before clicking in           
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618) 
```
:::

### Coordinated Multiple Views with ggiraph

We can use *patchwork* function to create interactive coorindated multiple views. 

::: panel-tabset

## The Plot
```{r}
#| echo: false
# Plot first ggplot object
p1 <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(data_id = ID)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(y = "Science\n Scores",
       x = "Math Scores") +
  theme(axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Plot second ggplot object
p2 <- ggplot(data=exam_data, 
            aes(x = MATHS, y = ENGLISH)) +
  geom_point_interactive(
    aes(data_id = ID)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(y = "English\n Scores",
       x = "Math Scores") +
  theme(axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass both ggplot objects into girafe, using patchwork
girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 6*0.618,
       options = list(
         opts_hover(css = "fill: #f5bc5f;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

## The Code Chunk

```{r}
#| eval: false
# Plot first ggplot object
p1 <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(data_id = ID)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(y = "Science\n Scores",
       x = "Math Scores") +
  theme(axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Plot second ggplot object
p2 <- ggplot(data=exam_data, 
            aes(x = MATHS, y = ENGLISH)) +
  geom_point_interactive(
    aes(data_id = ID)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(y = "English\n Scores",
       x = "Math Scores") +
  theme(axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass both ggplot objects into girafe, using patchwork
girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 6*0.618,
       options = list(
         opts_hover(css = "fill: #f5bc5f;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

:::

## Interactive Data Visualisation - plotly methods

There are two ways to create interactive graph by using `plotly`, they are:

-   by using `plot_ly()`, and
-   by using `ggplotly()`


### Creating an interactive scatter plot: plot_ly() method

Below we explore a basic way to plot an interactive plot.

::: panel-tabset

## The Plot
```{r}
#| echo: false

```

## The Code Chunk

```{r}
#| eval: false

```

:::

# Programming Animated Statistical Graphics with R

## Overview

In this exercise I will learn - how to create animated data visualisation by using **gganimate** and **plotly**. - how to reshape data by using **tidyr** package - how to process, wrangle and transform data by using **dplyr** package.

## Getting Started

## Loading libraries

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

### Importing data

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

## References

-   [**R for Visual Analytics: Programming Interactive Data Visualisation with R**](https://r4va.netlify.app/chap03).
