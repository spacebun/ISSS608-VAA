---
title: "Take-home Exercise 4"
subtitle: "Prototyping Modules for Visual Analytics Shiny Application"
date: February 25, 2024
date-modified:  last-modified
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: true
    
execute: 
  eval: true
  echo: true
  warning: false  
---

# Overview

## Load packages

First, we load packages required:

-   **tidyverse**: to support tasks such as reading in packages or data manipulation

-   **naniar**: for using *miss_vis()* function to check data for missing values

-   **imputeTS**: for using *na_ma()* function to impute missing values

-   **DT**: for using *datatable()* to view the dataset interactively

-   **lubridate**: for handling date-time formats

```{r}
pacman::p_load(tidyverse, naniar,imputeTS, DT, lubridate)

# pacman::p_load(ggplot2, patchwork, 
#                ggridges, ggdist, ggstatsplot,
#                plotly, ggiraph, DT, ggdist, 
#                ungeviz, crosstalk, 
#                viridis)
```

# Data preparation

## Import data

::: callout-note
This section includes code on how data was retrieved. To skip ahead to the preparation of the retrieved data, you can skip ahead to @sec-loaddataset.
:::

Next, we load the [Climate Historical Daily Records](http://www.weather.gov.sg/climate-historical-daily/) for the **Changi** weather station, for the five years 1983, 1993, 2003, 2013 and 2023. The data for each month of the five years was downloaded using a python script. The data, in the form of .CSV files, will be imported as a list of CSV files, then compiled into a single dataframe using R.

First, we read in all .CSV files into a list object of dataframes. As the .CSV files may be ended with either UTF-8 or ISO-8859-1 encoding, we will create a function to read in the .CSV files that encompasses both types of encoding.

```{r}
#| eval: false
#| echo: false
# Define a function to read CSV files with different encodings
read_csv_files <- function(file_path, encodings = c("UTF-8", "ISO-8859-1")) {
  for (encoding in encodings) {
    tryCatch({
      return(read_csv(file_path, locale = locale(encoding = encoding)))
    }, error = function(e) {
      message(sprintf("Failed to decode %s with %s encoding: %s", file_path, encoding, e$message))
    })
  }
  stop(sprintf("Could not decode file %s with any of the provided encodings.", file_path))
}

# Define the names of the .CSV files
input_files <- list.files(path = "data/", pattern = "\\.csv$", full.names = TRUE)

# Read all CSV files into a list of dataframes
all_data <- map(input_files, read_csv_files)
```

Next, we identify columns with inconsistent data types across all the dataframes:

```{r}
#| eval: false
# Define a function to get column types of a data frame
get_column_types <- function(df) {
  sapply(df, class)
}

# Get column types for each data frame
columnTypesList <- map(all_data, get_column_types)

# Identify columns with different types across data frames
uniqueTypes <- unique(unlist(columnTypesList))
columnsWithDifferentTypes <- list()

for (typeName in uniqueTypes) {
  columnsOfType <- names(Filter(function(x) typeName %in% x, columnTypesList[[1]]))
  for (colName in columnsOfType) {
    typesFound <- unique(sapply(columnTypesList, `[`, colName))
    if (length(typesFound) > 1) {
      columnsWithDifferentTypes[[colName]] <- typesFound
    }
  }
}

# Display columns with different types
columnsWithDifferentTypes
```

From the code chunk above, we observe that:

-   The 'Mean Wind Speed (km/h)' and 'Max Wind Speed (km/h)' columns exhibit data type inconsistencies.

    -   These columns will be uniformly converted to numeric type.

-   The columns 'Highest 30 Min Rainfall (mm)', 'Highest 60 Min Rainfall (mm)', and 'Highest 120 Min Rainfall (mm)' are type character in some dataframes, and NA type in other dataframes.

    -   This suggests that these columns are present in some dataframes but absent in others. We will address the handling of these columns later on.

We hence convert the 'Mean Wind Speed (km/h)' and 'Max Wind Speed (km/h)' columns to numeric type:

```{r}
#| warning: false
#| eval: false
all_data <- map(all_data, ~ .x %>%
  mutate(
    `Mean Wind Speed (km/h)` = as.numeric(as.character(`Mean Wind Speed (km/h)`)),
    `Max Wind Speed (km/h)` = as.numeric(as.character(`Max Wind Speed (km/h)`))
  )
)
```

The list of dataframes is then combined into a single dataframe, *weather_data:*

```{r}
#| eval: false
weather_data <- bind_rows(all_data)
```

We will save this dataframe as an rds object for faster loading of data in the future.

```{r}
#| eval: false
write_rds(weather_data, "data/weather_data.rds")
```

## Load dataset {#sec-loaddataset}

To load this file in the future, follow the code in the code chunk below:

```{r}
weather_data <- read_rds("data/weather_data.rds")
```

## Check data health

Now that we have a single dataframe, we first check the health of the dataframe by:

-   using *glimpse()* to look at the structure of the dataframe, data types of the columns, and some values of the dataframe,

-   using *datatable()* from the DT package to view the dataframe more interactively,

-   using *duplicate()* to check the dataframe for any duplicated entries using *duplicate()*, and

-   using *vis_miss()* to check the state of missing values in the dataset.

::: panel-tabset
### glimpse()

```{r}
glimpse(weather_data)
```

### datatable()

```{r}
datatable(weather_data, 
          class= "compact",
          rownames = FALSE,
          width="100%", 
          options = list(pageLength = 10,scrollX=T))
```

### duplicated()

```{r}
weather_data[duplicated(weather_data),]
```

### vis_miss()

```{r}
vis_miss(weather_data)
```
:::

From the above, we observe these data quality issues and actionable insights:

-   The *glimpse* function shows three columns 'Year', 'Month', 'Day' representing the date of the record.

    -   These columns can be used to create a 'Date' column of date type that would make visualizing the data for different time periods easier.

-   The *glimpse* function shows the presence of character values **`"\u0097"`** in the columns 'Highest 30 Min Rainfall (mm)', 'Highest 60 Min Rainfall (mm)', and 'Highest 120 Min Rainfall (mm)'.

    -   These non-numeric placeholders represent missing values and should be converted to NA.

    -   These columns should also be of type numeric instead of character.

-   The *glimpse* function also shows there is a possible naming inconsistency of the 'Highest 30 Min Rainfall (mm)', 'Highest 60 Min Rainfall (mm)', and 'Highest 120 Min Rainfall (mm)' character type columns, where similar columns 'Highest 30 **min** Rainfall (mm)', 'Highest 60 **min** Rainfall (mm)', and 'Highest 120 **min** Rainfall (mm)' of numeric type exist. The *vis_miss()* function confirms this naming inconsistency.

    -   This can be resolved by merging the information in the character and double type columns.

## Clean data

```{r}
# First, create a new column Date
weather_data <- weather_data %>%
  mutate(Date = as.Date(paste(Year, Month, Day, sep = "-")))

# Next, convert character values "\u0097" to NA.
weather_data <- weather_data %>%
  mutate(
    `Highest 30 Min Rainfall (mm)` = na_if(`Highest 30 Min Rainfall (mm)`, "\u0097"),
    `Highest 60 Min Rainfall (mm)` = na_if(`Highest 60 Min Rainfall (mm)`, "\u0097"),
    `Highest 120 Min Rainfall (mm)` = na_if(`Highest 120 Min Rainfall (mm)`, "\u0097")
  )

# Next, convert these columns to numeric type.
weather_data <- weather_data %>%
  mutate(
    `Highest 30 Min Rainfall (mm)` = as.numeric(`Highest 30 Min Rainfall (mm)`),
    `Highest 60 Min Rainfall (mm)` = as.numeric(`Highest 60 Min Rainfall (mm)`),
    `Highest 120 Min Rainfall (mm)` = as.numeric(`Highest 120 Min Rainfall (mm)`)
  )

# Lastly, merge duplicate columns on the condition that the originally numeric column (e.g. Highest 30 min Rainfall (mm)) is not NA value.

weather_data <- weather_data %>%
  mutate(
    `Highest 30 Min Rainfall (mm)` = coalesce(`Highest 30 min Rainfall (mm)`, `Highest 30 Min Rainfall (mm)`),
    `Highest 60 Min Rainfall (mm)` = coalesce(`Highest 60 min Rainfall (mm)`, `Highest 60 Min Rainfall (mm)`),
    `Highest 120 Min Rainfall (mm)` = coalesce(`Highest 120 min Rainfall (mm)`, `Highest 120 Min Rainfall (mm)`)
  ) %>%
  # Optional: Remove the source columns if they are no longer needed
  select(
    -`Highest 30 min Rainfall (mm)`,
    -`Highest 60 min Rainfall (mm)`,
    -`Highest 120 min Rainfall (mm)`
  )

```

We then check the health of the data again:

::: panel-tabset
### glimpse()

```{r}
glimpse(weather_data)
```

### datatable()

```{r}
datatable(weather_data, 
          class= "compact",
          rownames = FALSE,
          width="100%", 
          options = list(pageLength = 10,scrollX=T))
```

### vis_miss()

```{r}
vis_miss(weather_data)
```
:::

Insights:

-   The dataset is now clean. It has 1825 rows and 14 columns of correct data types.

-   The missing values in the data for the three columns 'Highest 30 Min Rainfall (mm)', 'Highest 60 Min Rainfall (mm)', and 'Highest 120 Min Rainfall (mm)' correspond with [information that these datapoints were not collected before 2014](http://www.weather.gov.sg/wp-content/uploads/2022/06/Station_Records.pdf). Hence, we will leave the values for the years before 2014 as NA.

## Rename columns

We will rename the following columns for easier handling while plotting:

```{r}
weather_data <- weather_data %>%
  rename(
    Mean_Temperature = `Mean Temperature (°C)`,
    Max_Temperature = `Maximum Temperature (°C)`,
    Min_Temperature = `Minimum Temperature (°C)`
  )
```

## Select temperature data for June

As we have mentioned that we will be focusing on the month of **June** for this exercise, we will extract the data for this month. We will exclude the columns on rainfall and wind speed as well.

```{r}
june_weather_data <- weather_data %>%
  filter(Month == 6) %>%
  select(Station, Year, Month, Day, Date, Mean_Temperature, Min_Temperature, Max_Temperature)

```

We can now proceed with the next steps.

```{r}
datatable(june_weather_data, 
          class= "compact",
          rownames = FALSE,
          width="100%", 
          options = list(pageLength = 10,scrollX=T))
```

# Investigating Temperature Claims

To address the future climate projection claim that "Daily mean temperature are projected to increase by 1.4 to 4.6C", we will look at the following measures:

-   'Mean_Temperature'
-   'Max_Temperature'
-   'Min_Temperature'

For each measure, we will:

-   Plot ridge line and interactive violin-box plot to observe distribution,
-   Plot uncertainty (point estimate with error bar and confidence interval) to get a sensing of confidence of the mean,
-   Plot statistical test to determine if difference between the years are statistically significant.

## Looking at 'Mean_Temperature'

### Distribution of values

We first observe the distributions of the 'Mean_Temperature' values in June for the five years, with a static **ridge line plot**. This plot will allow us to also visually compare the values across the years.

While the ridge line plot gives a good view of distribution shape for the years, it lacks details such as median, and interquartiles.

To make the visualization of distribution more informative for a user, we choose to use **plot_ly** to plot an **interactive violin plot and boxplot**. The addition of a boxplot adds statistical detail to the distributions being plotted. The summary statistics will appear on hover as a tooltip, giving a user a handy view of some details on the data. Moreover, we will include the mean and median lines. On hover, a line is shown across the plots enabling for easy yet accurate comparison of mean and median values across the years.

::: panel-tabset
#### Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 5

june_weather_data$Year<-factor(june_weather_data$Year,levels=c("1983", "1993", "2003", "2013", "2023"))

# Ridge plot
ridge_plot <- ggplot(june_weather_data, aes(x = Mean_Temperature, y=factor(Year), fill = stat(x))) +
                       geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
                       scale_y_discrete(limits = unique(rev(june_weather_data$Year)))+
                       scale_fill_viridis_c(name = "°C", option = "C") +
                       labs(title = 'June temperature profile',
                        subtitle = 'Distribution of daily mean temperature recorded in June across years',
                        x = "Temperature (°C)",
                        y = "Year") +
                        theme_ridges(font_size = 13, grid = TRUE) +
  theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))

# Violin with box plot
violin_plot <- plot_ly(data = june_weather_data, x = ~Year, y = ~Mean_Temperature, type = 'violin', 
               split = ~Year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of Mean Temperatures in June Across Years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (°C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))
# Display plots
ridge_plot
violin_plot
```

#### Code

```{r}
#| eval: false
# Ridge plot
ridge_plot <- ggplot(june_weather_data, aes(x = Mean_Temperature, y=factor(Year), fill = stat(x))) +
                       geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
                       scale_y_discrete(limits = unique(rev(june_weather_data$Year)))+
                       scale_fill_viridis_c(name = "°C", option = "C") +
                       labs(title = 'June temperature profile',
                        subtitle = 'Distribution of daily mean temperature recorded in June across years',
                        x = "Temperature (°C)",
                        y = "Year") +
                        theme_ridges(font_size = 13, grid = TRUE) +
  theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))

# Violin with box plot
violin_plot <- plot_ly(data = june_weather_data, x = ~Year, y = ~Mean_Temperature, type = 'violin', 
               split = ~Year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of Mean Temperatures in June Across Years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (°C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))
# Display plots
ridge_plot
violin_plot

```
:::

::: callout-tip
### Insights

-   The rightward shift of peaks over the years suggests an increase in average temperature.
-   Distribution shapes vary, with some resembling normal distributions (1983, 2003, 2023) and others showing non-normal distributions or multiple peaks (1993, 2013).
-   The distribution for years 2003, 2013, and 2023 exhibit more negative skewness compared to 1983 and 1993, supported by higher median than mean values, indicating a higher frequency of hotter days in those years.
-   The left tails of the distributions, are not extending as far left in more recent years as they do in earlier years. This suggests a decrease in the occurrence of lower temperature extremes, which could mean fewer cooling days in June in recent years.
-   The right tails have remained similar in position across the five years, indicating that the magnitude of warmer temperature extremes in June have stayed relatively consistent over the five years.
-   From the violin plot, median temperatures show a slight increase over the years, but with a dip in 2013 and similarity between 2003 and 2023.
-   The interquartile ranges do not show a consistent trend in terms of becoming wider or narrower, implying that the variability around the median does not follow a clear pattern over the years.
-   The lower tails show an increasing trend. Similar to the ridge line plot, this indicates fewer cooler days in recent years.
-   However, notably the year 2003 had the most extreme low mean temperature values.
:::

### Visualizing uncertainty of point estimate, the mean

Next, we want to explore the estimated mean of 'Mean_Temperature' values for June of each year, and visualize the uncertainty associated with that estimate.

#### Derive summary statistics

Firstly, we derive the necessary summary statistics:

```{r}
#| code-fold: true
my_sum <- june_weather_data %>%
  group_by(Year) %>%
  summarise( # used to compute the count of observations, mean, standard deviation
    n=n(),
    mean=mean(Mean_Temperature),
    sd=sd(Mean_Temperature)
    ) %>%
  mutate(se=sd/sqrt(n-1)) %>% # used to derive standard error of mean
mutate(
    ci_lower = mean - (1.96 * se),
    ci_upper = mean + (1.96 * se)
  )
```

#### Plotting standard error bars and confidence interval

Now we plot the standard error bars of the mean of the Mean_Temperature values by Year as shown below. Again, we choose **plot_ly** to make this plot interactive - on hover, a tooltip shows the year, point estimate of mean, and the standard error.

::: panel-tabset
#### Plot

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 10

# Code to plot side by side sub plots
my_sum$Year <- as.numeric(as.character(my_sum$Year))

my_sum_d = highlight_key(my_sum)

# Create the plot for mean with standard error
fig1 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
        error_y = ~list(array = se,
                        color = '#000000')) %>%
  layout(title = list(text = '<b>Mean of Mean_Temperature values \n with Standard Error</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))),
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))


# Add the second trace for mean with confidence intervals
fig2 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
               error_y = ~list(
                 array = my_sum$ci_upper - my_sum$mean,
                 arrayminus = my_sum$mean - my_sum$ci_lower,
                 color = '#000000'
               ),
               line = list(color = 'blue')) %>%
  layout(title = list(text = '<b>Mean of Mean_Temperature values \n with 95% Confidence Intervals</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))), 
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))
bscols(list(fig1,
       datatable(my_sum_d, 
                 width = "200%",
                 colnames = c("Year", "Number of Days", "Mean", "Standard Deviation", "Standard Error", "Confidence Interval (Lower)", "Confidence Interval (Higher)"),
                 rownames = FALSE,
                 height = 200)), 
        fig2)

```

#### Code

```{r}
#| eval: false

# Code to plot side by side sub plots
my_sum$Year <- as.numeric(as.character(my_sum$Year))

my_sum_d = highlight_key(my_sum)

# Create the plot for mean with standard error
fig1 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
        error_y = ~list(array = se,
                        color = '#000000')) %>%
  layout(title = list(text = '<b>Mean of Mean_Temperature values \n with Standard Error</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))),
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))


# Add the second trace for mean with confidence intervals
fig2 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
               error_y = ~list(
                 array = my_sum$ci_upper - my_sum$mean,
                 arrayminus = my_sum$mean - my_sum$ci_lower,
                 color = '#000000'
               ),
               line = list(color = 'blue')) %>%
  layout(title = list(text = '<b>Mean of Mean_Temperature values \n with 95% Confidence Intervals</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))), 
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))
bscols(list(fig1,
       datatable(my_sum_d, 
                 width = "200%",
                 colnames = c("Year", "Number of Days", "Mean", "Standard Deviation", "Standard Error", "Confidence Interval (Lower)", "Confidence Interval (Higher)"),
                 rownames = FALSE,
                 height = 200)), 
        fig2)
```
:::

::: callout-tip
### Insights

-   From 1983 to 1993 to 2003, the mean showed significant and consistent increase, indicating the increasing trend in temperature.
-   However, from 2003, this increase appeared to level off, suggesting that there was a decrease in rate of temperature change.
-   This is accompanied by the overlapping confidence intervals, which indicates the differences between the estimates for 2003, 2013 and 2023 are not significant.
-   The length of the error bars across the years are similar, indicating similar precision in estimating the mean. However, this could also be due to small sample size of only 30 points per year.
:::

### Statistical testing for difference amongst years

To determine whether the mean daily temperatures in June have varied significantly over the span of five years, we will conduct a statistical test. We earlier observed that some of the data is non-normal, hence we will use a non-parametric test. Since we have multiple groups, it will be a Kruskal-Wallis one-way ANOVA test.

The hypotheses would be:

-   Null Hypothesis (H0): There is no difference in the median values among the five years. This means that any observed difference in among the years is due to random chance.
-   Alternative Hypothesis (H1): There is a difference in the median values among the five years. This means that the observed difference is not due to chance, and there is a true difference among the years.

::: panel-tabset
#### Plot

```{r}
#| echo: false
ggbetweenstats(
  data = june_weather_data,
  x = Year, 
  y = Mean_Temperature,
  type = "np", # non-parametric text that compares median, 
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s", # displays only significant pairwise comparisons
  p.adjust.method = "fdr", 
  messages = FALSE
)
```

#### Code

```{r}
#| eval: false
ggbetweenstats(
  data = june_weather_data,
  x = Year, 
  y = Mean_Temperature,
  type = "np", # non-parametric text that compares median, 
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s", # displays only significant pairwise comparisons
  p.adjust.method = "fdr", 
  messages = FALSE
)
```
:::

::: callout-tip
### Insights

-   The p-value is below 0.05. Hence we have sufficient evidence to reject the Null Hypothesis. We can conclude that there is evidence to indicate that there is a difference in the median temperatures for June across the years.
-   However, closer inspection of pairwise differences reveals that no 10-year intervals (for example, comparing 1983 to 1993, comparing 2003 to 2013 etc.) has a p-value below 0.05. This indicates that there is not statistical evidence that the mean daily temperature for June is actually different for the 10-year intervals.
:::

It may not be accurate to claim that the temperature increases each year. Moreover, we have shown that the magnitude of temperature increases across the years for the month of June is not very large - nowhere close to 1.4 to 4.6 C.

Let's look next at 'Min_Temperature'.

## Looking at 'Min_Temperature'

### Distribution of values

::: panel-tabset
#### Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 5

june_weather_data$Year<-factor(june_weather_data$Year,levels=c("1983", "1993", "2003", "2013", "2023"))

# Ridge plot
ridge_plot <- ggplot(june_weather_data, aes(x = Min_Temperature, y=factor(Year), fill = stat(x))) +
                       geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
                       scale_y_discrete(limits = unique(rev(june_weather_data$Year)))+
                       scale_fill_viridis_c(name = "°C", option = "C") +
                       labs(title = 'June temperature profile',
                        subtitle = 'Distribution of daily minimum temperature recorded in June across years',
                        x = "Temperature (°C)",
                        y = "Year") +
                        theme_ridges(font_size = 13, grid = TRUE) +
  theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))


# Violin with box plot
violin_plot <- plot_ly(data = june_weather_data, x = ~Year, y = ~Min_Temperature, type = 'violin', 
               split = ~Year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of Minimum Temperatures in June Across Years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (°C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))

ridge_plot
violin_plot
```

#### Code

```{r}
#| eval: false

june_weather_data$Year<-factor(june_weather_data$Year,levels=c("1983", "1993", "2003", "2013", "2023"))

# Ridge plot
ridge_plot <- ggplot(june_weather_data, aes(x = Min_Temperature, y=factor(Year), fill = stat(x))) +
                       geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
                       scale_y_discrete(limits = unique(rev(june_weather_data$Year)))+
                       scale_fill_viridis_c(name = "°C", option = "C") +
                       labs(title = 'June temperature profile',
                        subtitle = 'Distribution of daily minimum temperature recorded in June across years',
                        x = "Temperature (°C)",
                        y = "Year") +
                        theme_ridges(font_size = 13, grid = TRUE) +
  theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))


# Violin with box plot
violin_plot <- plot_ly(data = june_weather_data, x = ~Year, y = ~Min_Temperature, type = 'violin', 
               split = ~Year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of Minimum Temperatures in June Across Years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (°C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))

ridge_plot
violin_plot
```
:::

::: callout-tip
### Insights

-   The positions of the distributions look similar across the years, with no notable or consistent shift towards the left or right.
-   The left tails of the distributions are quite consistent in extending to the far left. This suggests consistent occurrence of extreme minimum temperatures across the years.
-   The shape of distributions are non-normal, except for the year 1983. Some of the non-normal distributions have multiple peaks, like 1993 and 2023.
-   Looking at the violin plot, the median temperatures do appear to rise slightly from 1983 to 1993 to 2003, but seem to dip at 2013 before a slight rise in 2023.
-   Notably the year 1983 had the most extreme low Min_Temperature values.
:::

### Visualizing uncertainty of point estimate, the mean

Next, we will explore the estimated mean of 'Min_Temperature' values for each year, and visualize the uncertainty associated with that estimate.

#### Derive summary statistics

Firstly, we derive the necessary summary statistics.

```{r}
#| code-fold: true
my_sum <- june_weather_data %>%
  group_by(Year) %>%
  summarise( # used to compute the count of observations, mean, standard deviation
    n=n(),
    mean=mean(Min_Temperature),
    sd=sd(Min_Temperature)
    ) %>%
  mutate(se=sd/sqrt(n-1)) %>% # used to derive standard error of mean
mutate(
    ci_lower = mean - (1.96 * se),
    ci_upper = mean + (1.96 * se)
  )
```

#### Plotting standard error bars and confidence interval

::: panel-tabset
#### Plot

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 10

# Code to plot side by side sub plots
my_sum$Year <- as.numeric(as.character(my_sum$Year))

my_sum_d = highlight_key(my_sum)

# Create the plot for mean with standard error
fig1 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
        error_y = ~list(array = se,
                        color = '#000000')) %>%
  layout(title = list(text = '<b>Mean of Min_Temperature values \n with Standard Error</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))),
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))


# Add the second trace for mean with confidence intervals
fig2 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
               error_y = ~list(
                 array = my_sum$ci_upper - my_sum$mean,
                 arrayminus = my_sum$mean - my_sum$ci_lower,
                 color = '#000000'
               ),
               line = list(color = 'blue')) %>%
  layout(title = list(text = '<b>Mean of Min_Temperature values \n with 95% Confidence Intervals</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))), 
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))
bscols(list(fig1,
       datatable(my_sum_d, 
                 width = "200%",
                 colnames = c("Year", "Number of Days", "Mean", "Standard Deviation", "Standard Error", "Confidence Interval (Lower)", "Confidence Interval (Higher)"),
                 rownames = FALSE,
                 height = 200)), 
        fig2)
```

#### Code

```{r}
#| eval: false
# Code to plot side by side sub plots
my_sum$Year <- as.numeric(as.character(my_sum$Year))

my_sum_d = highlight_key(my_sum)

# Create the plot for mean with standard error
fig1 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
        error_y = ~list(array = se,
                        color = '#000000')) %>%
  layout(title = list(text = '<b>Mean of Min_Temperature values \n with Standard Error</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))),
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))


# Add the second trace for mean with confidence intervals
fig2 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
               error_y = ~list(
                 array = my_sum$ci_upper - my_sum$mean,
                 arrayminus = my_sum$mean - my_sum$ci_lower,
                 color = '#000000'
               ),
               line = list(color = 'blue')) %>%
  layout(title = list(text = '<b>Mean of Min_Temperature values \n with 95% Confidence Intervals</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))), 
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))
bscols(list(fig1,
       datatable(my_sum_d, 
                 width = "200%",
                 colnames = c("Year", "Number of Days", "Mean", "Standard Deviation", "Standard Error", "Confidence Interval (Lower)", "Confidence Interval (Higher)"),
                 rownames = FALSE,
                 height = 200)), 
        fig2)
```
:::

::: callout-tip
### Insights

-   The trend in magnitude of temperature increase is not consistent. From 1983 to 1993 there was a slight increase in temperature, and a larger increase from 1993 to 2003. However, the mean seemed to dip from 2003 to 2013 and slightly rise from 2013 to 2023.
-   The error bars and confidence intervals for the years 1983 and 1993 overlap almost completely, while the error bars for the years 2003, 2013 and 2023 overlap almost completely. This overlap suggests that the difference between the years is not statistically significant.
:::

### Statistical testing for difference amongst years

Given that the data is non-normal and there are multiple groups, we will use a Kruskal-Wallis one-way ANOVA test to test whether the Min_Temperature varies significantly among the five years.

The hypotheses would be:

-   Null Hypothesis (H0): There is no difference in the median values among the five years. This means that any observed difference in among the years is due to random chance.
-   Alternative Hypothesis (H1): There is a difference in the median values among the five years. This means that the observed difference is not due to chance, and there is a true difference among the years.

```{r}
#| code-fold: true
ggbetweenstats(
  data = june_weather_data,
  x = Year, 
  y = Min_Temperature,
  type = "np", # non-parametric text that compares median
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s", # displays only significant pairwise comparisons
  p.adjust.method = "fdr", 
  messages = FALSE
)
```

::: callout-tip
### Insights

-   The p-value is above 0.05. Hence we do not have sufficient evidence to reject the Null Hypothesis. We cannot conclude that there is evidence to indicate that there is a difference in the median Min_Temperature values for June across the years.
-   Moreover, no pairwise comparisons between the years show any p-value below 0.05 - indicating that we cannot conclude that the difference in Min_Temperature values between any of the years is significantly different.
:::

Let's look next at 'Max_Temperature'.

## Looking at 'Max_Temperature'

### Distribution of values

::: panel-tabset
#### Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 5

june_weather_data$Year<-factor(june_weather_data$Year,levels=c("1983", "1993", "2003", "2013", "2023"))

# Ridge plot
ridge_plot <- ggplot(june_weather_data, aes(x = Max_Temperature, y=factor(Year), fill = stat(x))) +
                       geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
                       scale_y_discrete(limits = unique(rev(june_weather_data$Year)))+
                       scale_fill_viridis_c(name = "°C", option = "C") +
                       labs(title = 'June temperature profile',
                        subtitle = 'Distribution of daily maximum temperature recorded in June across years',
                        x = "Temperature (°C)",
                        y = "Year") +
                        theme_ridges(font_size = 13, grid = TRUE) +
  theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))


# Violin with box plot
violin_plot <- plot_ly(data = june_weather_data, x = ~Year, y = ~Max_Temperature, type = 'violin', 
               split = ~Year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of Maximum Temperatures in June Across Years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (°C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))

ridge_plot
violin_plot
```

#### Code

```{r}
#| eval: false

june_weather_data$Year<-factor(june_weather_data$Year,levels=c("1983", "1993", "2003", "2013", "2023"))

# Ridge plot
ridge_plot <- ggplot(june_weather_data, aes(x = Max_Temperature, y=factor(Year), fill = stat(x))) +
                       geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
                       scale_y_discrete(limits = unique(rev(june_weather_data$Year)))+
                       scale_fill_viridis_c(name = "°C", option = "C") +
                       labs(title = 'June temperature profile',
                        subtitle = 'Distribution of daily maximum temperature recorded in June across years',
                        x = "Temperature (°C)",
                        y = "Year") +
                        theme_ridges(font_size = 13, grid = TRUE) +
  theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))


# Violin with box plot
violin_plot <- plot_ly(data = june_weather_data, x = ~Year, y = ~Max_Temperature, type = 'violin', 
               split = ~Year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of Maximum Temperatures in June Across Years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (°C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))

ridge_plot
violin_plot
```
:::

::: callout-tip
### Insights

-   The positions of the distributions look fluctuate slightly over the years. From 1983 to 1993, the distribution shifted left; from 1993 to 2003, the distribution shifted right. The distribution position remained quite constant from 2003 to 2013 to 2023.
-   The left tails of the distributions are quite consistent in extending to the far left.
-   The shape of distributions are non-normal, except for the year 1993 Some of the non-normal distributions have multiple peaks, like 2013 and 2023.
-   The median temperatures fluctuate across the years. From the years 2003 to 2023, the median 'Max_Temperature' value decreases.
-   The years also have very long lower tails, indicating days where the maximum temperature was not so high. These would have been more cooling days.
:::

### Visualizing uncertainty of point estimate, the mean

Deriving the necessary summary statistics:

```{r}
#| code-fold: true
my_sum <- june_weather_data %>%
  group_by(Year) %>%
  summarise( # used to compute the count of observations, mean, standard deviation
    n=n(),
    mean=mean(Max_Temperature),
    sd=sd(Max_Temperature)
    ) %>%
  mutate(se=sd/sqrt(n-1)) %>% # used to derive standard error
mutate(
    ci_lower = mean - (1.96 * se),
    ci_upper = mean + (1.96 * se)
  )

```

#### Plotting standard error bars and confidence interval

::: panel-tabset
#### Plot

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 10

# Code to plot side by side sub plots
my_sum$Year <- as.numeric(as.character(my_sum$Year))

my_sum_d = highlight_key(my_sum)

# Create the plot for mean with standard error
fig1 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
        error_y = ~list(array = se,
                        color = '#000000')) %>%
  layout(title = list(text = '<b>Mean of Max_Temperature values \n with Standard Error</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))),
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))


# Add the second trace for mean with confidence intervals
fig2 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
               error_y = ~list(
                 array = my_sum$ci_upper - my_sum$mean,
                 arrayminus = my_sum$mean - my_sum$ci_lower,
                 color = '#000000'
               ),
               line = list(color = 'blue')) %>%
  layout(title = list(text = '<b>Mean of Max_Temperature values \n with 95% Confidence Intervals</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))), 
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))
bscols(list(fig1,
       datatable(my_sum_d, 
                 width = "200%",
                 colnames = c("Year", "Number of Days", "Mean", "Standard Deviation", "Standard Error", "Confidence Interval (Lower)", "Confidence Interval (Higher)"),
                 rownames = FALSE,
                 height = 200)), 
        fig2)
```

#### Code

```{r}
#| eval: false

# Code to plot side by side sub plots
my_sum$Year <- as.numeric(as.character(my_sum$Year))

my_sum_d = highlight_key(my_sum)

# Create the plot for mean with standard error
fig1 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
        error_y = ~list(array = se,
                        color = '#000000')) %>%
  layout(title = list(text = '<b>Mean of Max_Temperature values \n with Standard Error</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))),
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))


# Add the second trace for mean with confidence intervals
fig2 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
               error_y = ~list(
                 array = my_sum$ci_upper - my_sum$mean,
                 arrayminus = my_sum$mean - my_sum$ci_lower,
                 color = '#000000'
               ),
               line = list(color = 'blue')) %>%
  layout(title = list(text = '<b>Mean of Max_Temperature values \n with 95% Confidence Intervals</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))), 
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))
bscols(list(fig1,
       datatable(my_sum_d, 
                 width = "200%",
                 colnames = c("Year", "Number of Days", "Mean", "Standard Deviation", "Standard Error", "Confidence Interval (Lower)", "Confidence Interval (Higher)"),
                 rownames = FALSE,
                 height = 200)), 
        fig2)
```
:::

::: callout-tip
### Insights

-   The trend in magnitude of temperature increase is not consistent. From 1983 to 1993 there was a slight decrease. From 1993 to 2003 there is a large increase, but this remains quite constant to 2013 before decreasing in 2023.
-   The length of the error bars across the years are similar, indicating similar precision in estimating the mean.
-   However, the overlapping confidence intervals between 1983 and 1993, as well as among the years 2003, 2013, and 2023, suggest that the differences in the estimates across these periods lack statistical significance.
:::

### Statistical testing for difference amongst years

Given that the data is non-normal and there are multiple groups, we will use a Kruskal-Wallis one-way ANOVA test to test whether the Max_Temperature varies significantly among the five years.

The hypotheses would be:

-   Null Hypothesis (H0): There is no difference in the median values among the five years. This means that any observed difference in among the years is due to random chance.
-   Alternative Hypothesis (H1): There is a difference in the median values among the five years. This means that the observed difference is not due to chance, and there is a true difference among the years.

::: panel-tabset
#### Plot

```{r}
#| echo: false
ggbetweenstats(
  data = june_weather_data,
  x = Year, 
  y = Max_Temperature,
  type = "np", # non-parametric text that compares median
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s", # displays only significant pairwise comparisons
  p.adjust.method = "fdr", 
  messages = FALSE
)
```

#### Code

```{r}
#| eval: false
ggbetweenstats(
  data = june_weather_data,
  x = Year, 
  y = Max_Temperature,
  type = "np", # non-parametric text that compares median
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s", # displays only significant pairwise comparisons
  p.adjust.method = "fdr", 
  messages = FALSE
)
```
:::

::: callout-tip
### Insights

-   The p-value is below 0.05. Hence we have sufficient evidence to reject the Null Hypothesis. We can conclude that there is evidence to indicate that there is a difference in the median Max_Temperature values for June across the years.
-   However on closer inspection of the pairwise comparisons, only 1 pair of consecutive 10-year intervals, 1993 and 2003, have a p-value below 0.05.
:::

## Looking at difference in Min and Max

To comprehensively evaluate the claim regarding future climate projections of a 1.4 to 4.6°C increase in daily mean temperatures, we will examine the daily temperature difference (the difference between 'Max_Temperature' and 'Min_Temperature'). Analysing this will help validate if observed trends in mean temperatures are consistent with changes in daily temperature variability.

We will create a new column, 'Temp_Difference' in the code chunk below:

```{r}
june_weather_data$Temp_Difference <- june_weather_data$Max_Temperature - june_weather_data$Min_Temperature
```

### Distribution of values

::: panel-tabset
#### Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 5

june_weather_data$Year<-factor(june_weather_data$Year,levels=c("1983", "1993", "2003", "2013", "2023"))

# Ridge plot
ridge_plot <- ggplot(june_weather_data, aes(x = Temp_Difference, y=factor(Year), fill = stat(x))) +
                       geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
                       scale_y_discrete(limits = unique(rev(june_weather_data$Year)))+
                       scale_fill_viridis_c(name = "°C", option = "C") +
                       labs(title = 'June temperature profile',
                        subtitle = 'Distribution of daily temperature differences recorded in June across years',
                        x = "Temperature (°C)",
                        y = "Year") +
                        theme_ridges(font_size = 13, grid = TRUE) +
  theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))


# Violin with box plot
violin_plot <- plot_ly(data = june_weather_data, x = ~Year, y = ~Temp_Difference, type = 'violin', 
               split = ~Year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of daily temperature differences recorded in June across years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (°C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))

ridge_plot
violin_plot
```

#### Code

```{r}
#| eval: false

june_weather_data$Year<-factor(june_weather_data$Year,levels=c("1983", "1993", "2003", "2013", "2023"))

# Ridge plot
ridge_plot <- ggplot(june_weather_data, aes(x = Temp_Difference, y=factor(Year), fill = stat(x))) +
                       geom_density_ridges_gradient(scale =2,rel_min_height = 0.01, gradient_lwd = 1.) +
                       scale_y_discrete(limits = unique(rev(june_weather_data$Year)))+
                       scale_fill_viridis_c(name = "°C", option = "C") +
                       labs(title = 'June temperature profile',
                        subtitle = 'Distribution of daily temperature differences recorded in June across years',
                        x = "Temperature (°C)",
                        y = "Year") +
                        theme_ridges(font_size = 13, grid = TRUE) +
  theme(plot.title = element_text(size = 14),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8, angle = 360))


# Violin with box plot
violin_plot <- plot_ly(data = june_weather_data, x = ~Year, y = ~Temp_Difference, type = 'violin', 
               split = ~Year, 
               box = list(visible = T),
               meanline = list(visible = T)) %>% # Adds a box plot inside the violin for summary statistics
  layout(title = list(text = "<b>Distribution of daily temperature differences recorded in June across years</b>", 
                                                   font = list(family = "Arial", size = 14),
                                                   xanchor = "center", xref = "paper",
                                                   yanchor = "middle", yref = "paper"),
                      yaxis = list(title = list(text = "Temperature (°C)", 
                                                font = list(family = "Arial", size = 12)) ),
                      xaxis = list(title = list(text = "Year", 
                                                font = list(family = "Arial", size = 12)) ))

ridge_plot
violin_plot
```
:::

::: callout-tip
### Insights

-   There appears to be no notable or consistent shift towards the left or right across the years.
-   The distributions for the years 1993 and 2013 appear to be flatter than the the other years, indicating greater temperature differences between minimum and maximum temperature.
-   For the years 1983, 1993 and 2013, the right tails appear to extend more to the right, suggesting more days where daily temperature difference is higher.
-   The shape of distributions are non-normal, except for the year 2003.
-   While there appears to be no notable trend in median values across the years, the year 2023 has the lowest median value suggesting that there were more days where the daily temperature difference was smaller. It could suggest the occurrence of fewer extreme temperature differences during 2023.
:::

### Visualizing uncertainty of point estimate, the mean

Deriving the necessary summary statistics:

```{r}
#| code-fold: true
my_sum <- june_weather_data %>%
  group_by(Year) %>%
  summarise( # used to compute the count of observations, mean, standard deviation
    n=n(),
    mean=mean(Temp_Difference),
    sd=sd(Temp_Difference)
    ) %>%
  mutate(se=sd/sqrt(n-1)) %>% # used to derive standard error of mean
mutate(
    ci_lower = mean - (1.96 * se),
    ci_upper = mean + (1.96 * se)
  )

```

#### Plotting standard error bars and confidence interval

::: panel-tabset
#### Plot

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 10

# Change Year back to numeric type
my_sum$Year <- as.numeric(as.character(my_sum$Year))

# Create crosstalk object
my_sum_d = highlight_key(my_sum)

# Create the plot for mean with standard error
fig1 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
        error_y = ~list(array = se,
                        color = '#000000')) %>%
  layout(title = list(text = '<b>Mean of Temp_Difference values \n with Standard Error</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))),
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))


# Add the second trace for mean with confidence intervals
fig2 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
               error_y = ~list(
                 array = my_sum$ci_upper - my_sum$mean,
                 arrayminus = my_sum$mean - my_sum$ci_lower,
                 color = '#000000'
               ),
               line = list(color = 'blue')) %>%
  layout(title = list(text = '<b>Mean of Temp_Difference values \n with 95% Confidence Intervals</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))), 
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))

# Layout of plots
bscols(list(fig1,
       datatable(my_sum_d, 
                 width = "200%",
                 colnames = c("Year", "Number of Days", "Mean", "Standard Deviation", "Standard Error", "Confidence Interval (Lower)", "Confidence Interval (Higher)"),
                 rownames = FALSE,
                 height = 200)), 
        fig2)
```

#### Code

```{r}
#| eval: false

# Change Year back to numeric type
my_sum$Year <- as.numeric(as.character(my_sum$Year))

# Create crosstalk object
my_sum_d = highlight_key(my_sum)

# Create the plot for mean with standard error
fig1 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
        error_y = ~list(array = se,
                        color = '#000000')) %>%
  layout(title = list(text = '<b>Mean of Temp_Difference values \n with Standard Error</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))),
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))


# Add the second trace for mean with confidence intervals
fig2 <- plot_ly(data = my_sum_d, x = ~Year, y = ~mean, type = 'scatter', mode = 'lines+markers',
               error_y = ~list(
                 array = my_sum$ci_upper - my_sum$mean,
                 arrayminus = my_sum$mean - my_sum$ci_lower,
                 color = '#000000'
               ),
               line = list(color = 'blue')) %>%
  layout(title = list(text = '<b>Mean of Temp_Difference values \n with 95% Confidence Intervals</b>', font = list(size = 14), xanchor = "center", xref = "paper"),
         xaxis = list(title = list(text = 'Year', font = list(size = 11))), 
         yaxis = list(title = list(text = 'Temperature (°C)', font = list(size = 11))))

# Layout of plots
bscols(list(fig1,
       datatable(my_sum_d, 
                 width = "200%",
                 colnames = c("Year", "Number of Days", "Mean", "Standard Deviation", "Standard Error", "Confidence Interval (Lower)", "Confidence Interval (Higher)"),
                 rownames = FALSE,
                 height = 200)), 
        fig2)
```
:::

::: callout-tip
### Insights

-   The trend in magnitude of temperature difference is not consistent.
-   However, the overlapping error bars and confidence intervals suggest that the differences in the estimates across these periods lack statistical significance.
:::

### Statistical testing for difference amongst years

Given that the data is non-normal and there are multiple groups, we will use a Kruskal-Wallis one-way ANOVA test to test whether the Temp_Difference varies significantly among the five years.

The hypotheses would be:

-   Null Hypothesis (H0): There is no difference in the median values among the five years. This means that any observed difference in among the years is due to random chance.
-   Alternative Hypothesis (H1): There is a difference in the median values among the five years. This means that the observed difference is not due to chance, and there is a true difference among the years.

::: panel-tabset
#### Plot

```{r}
#| echo: false
ggbetweenstats(
  data = june_weather_data,
  x = Year, 
  y = Temp_Difference,
  type = "np", # non-parametric text that compares median
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s", # displays only significant pairwise comparisons
  p.adjust.method = "fdr", 
  messages = FALSE
)
```

#### Code

```{r}
#| eval: false
ggbetweenstats(
  data = june_weather_data,
  x = Year, 
  y = Temp_Difference,
  type = "np", # non-parametric text that compares median
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s", # displays only significant pairwise comparisons
  p.adjust.method = "fdr", 
  messages = FALSE
)
```
:::

::: callout-tip
### Insights

-   The p-value is above 0.05. Hence we do not have sufficient evidence to reject the Null Hypothesis. We cannot conclude that there is evidence to indicate that there is a difference in the median Temp_Difference values for June across the years.
-   Moreover, no pairwise comparisons between the years show any p-value below 0.05 - indicating that we cannot conclude that the difference in Temp_Difference values between any of the years is significantly different.
:::

## Summary and conclusion

In conclusion, we used visualizations to explore the various temperature measures (including daily mean, daily minimum, daily maximum, and daily difference) for the Changi weather station for the month of June across years of 1983, 1993, 2003, 2013 and 2023. Despite the claim projecting an increase in temperature magnitudes ranging from 1.4 to 4.6°C, our visual and statistical analyses of historical values did not support this projection.

Visually, our distribution plots depicted a consistent upward trajectory in temperature magnitudes for **daily mean temperature** across the years. However, statistical tests conducted showed that that the differences in the point estimate of daily mean temperature across these periods lacked statistical significance for 10-year intervals.

This was supported by the analysis of the daily minimum, daily maximum, and daily difference as well. This exercise suggests that while there could be increase in daily mean temperature over the years, more can be done to explore if the projected magnitude of increase is indeed as drastic as 1.4 to 4.6°C.

## References

-   [**R for Visual Analytics: Programming Interactive Data Visualisation with R**](https://r4va.netlify.app/chap03).
-   [**R for Visual Analytics: Visualising Distribution**](https://r4va.netlify.app/chap09).
-   [**R for Visual Analytics: Visual Statistical Analysis**](https://r4va.netlify.app/chap10).
-   [**R for Visual Analytics: Visualising Uncertainty**](https://r4va.netlify.app/chap11).
