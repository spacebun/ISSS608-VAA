---
title: "Hands-on Exercise 3"
subtitle: "[In-Progress] Interactivity in Visual Analytics: Principles and Methods"
date: January 22, 2024
date-modified: "last-modified"
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: false
    
execute: 
  eval: true
  echo: true
  warning: false  
---

# Programming Interactive Data Visualisation with R

## Overview

In this exercises I will learn how to create interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.

## Getting started

### Loading libraries

The following libraries will be used:

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making 'ggplot' graphics interactive.
-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.
-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.
-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
-   [**patchwork**](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.


```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```

### Importing data

The data used is the year end examination grades of a cohort of primary 3 students from a local school. From Hands-On Exercise 1, we know that the data has:

-   Four categorical attributes: ID, CLASS, GENDER, RACE
-   Three continuous attributes: MATHS, ENGLISH, SCIENCE

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## Interactive Data Visualisation - ggiraph methods

[**ggiraph**](https://davidgohel.github.io/ggiraph/) is a html widget and ggplot2 extension, that allows ggplot graphics to be interactive:

-   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.
-   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.
-   **Data_id**: a column of data-sets that contain an id to be associated with elements.

# Programming Animated Statistical Graphics with R

## Overview

In this exercise I will learn 
-   how to create animated data visualisation by using **gganimate** and **plotly**. 
-   how to reshape data by using **tidyr** package
-   how to process, wrangle and transform data by using **dplyr** package.

## Getting Started

## Loading libraries

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

### Importing data

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

## References

-   [**R for Visual Analytics: Programming Interactive Data Visualisation with R**](https://r4va.netlify.app/chap03).
