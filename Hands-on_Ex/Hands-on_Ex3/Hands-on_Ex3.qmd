---
title: "Hands-on Exercise 3 [In-Progress] "
subtitle: "Interactivity in Visual Analytics: Principles and Methods"
date: January 22, 2024
date-modified: "last-modified"
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: false
    
execute: 
  eval: true
  echo: true
  warning: false  
---

# Programming Interactive Data Visualisation with R

## Overview

In this exercises I will learn how to create interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.

## Getting started

### Loading libraries

The following libraries will be used:

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making 'ggplot' graphics interactive.
-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.
-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.
-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
-   [**patchwork**](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```

### Importing data

The data used is the year end examination grades of a cohort of primary 3 students from a local school. From Hands-On Exercise 1, we know that the data has:

-   Four categorical attributes: ID, CLASS, GENDER, RACE
-   Three continuous attributes: MATHS, ENGLISH, SCIENCE

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## Interactive Data Visualisation - ggiraph methods

[**ggiraph**](https://davidgohel.github.io/ggiraph/) is a html widget and ggplot2 extension, that allows ggplot graphics to be interactive:

We can makes ggplot graphics interactive with the following three arguments:

-   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   **Data_id**: a column of data-sets that contain an id to be associated with elements.

-   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

### `tooltip` aesthetic

Let's first demonstrate how we can make some graphs interactive with a tooltip. 

#### Display single level tooltip

Three steps to plotting a scatter plot with tooltip that shows studeNT ID:

-   Use `geom_point_interactive()` instead of `geom_point()`
-   Provide the aesthetic *tooltip* with **ID**
-   Call function `girafe` with the ggplot object so that the graphic is translated as a web interactive graphic

::: panel-tabset

## The Plot

```{r}
#| echo: False

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = ID)) +  # Provide tooltip aesthetic
    scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive relationship betweeen Science and Maths scores",
       subtitle = "Scatter plot of science and math scores of students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass ggplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

## The Code Chunk

```{r}
#| eval: False
# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = ID)) +  # Provide tooltip aesthetic
    scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive relationship betweeen Science and Maths scores",
       subtitle = "Scatter plot of science and math scores of students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass ggplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```
:::

#### Display multiple information on tooltip

The content of the tooltip can be customised by including a list object, that is passed into the aesthetic for *tooltip*.

::: panel-tabset

## The Plot

```{r}
#| echo: False
# Create new column for tooltip information 
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS,
  "\n Race = ", exam_data$RACE)) 

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), # Pass in list object to tooltip aesthetic
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL) +
    labs(title = "Distribution of Science Scores",
       subtitle = "Dotplot",
       x = "Science Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8))

# Pass ggplot object into girafe
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

## The Code Chunk

```{r}
#| eval: False
# Create new column for tooltip information 
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS,
  "\n Race = ", exam_data$RACE)) 

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), # Pass in list object to tooltip aesthetic
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL) +
    labs(title = "Distribution of Science Scores",
       subtitle = "Dotplot",
       x = "Science Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8))

# Pass ggplot object into girafe
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```
:::

#### Customize tooltip style

We can use `opts_tooltip()` to further customize the tooltip, such as changing opacity of background, or adding css declarations.


::: panel-tabset

## The Plot

```{r}
#| echo: False
# Create new column for tooltip information
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS,
  "\n Race = ", exam_data$RACE)) 

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL) +
    labs(title = "Distribution of Science Scores",
       subtitle = "Dotplot",
       x = "Science Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8))

# Create object for tooltip styling
tooltip_css <- "background-color:#93c7c2; #<<
font-style:bold; color:#464646;" #<<

# Pass ggplot object and tooltip styling into girafe
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)   
```

## The Code Chunk

```{r}
#| eval: False
# Create new column for tooltip information
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS,
  "\n Race = ", exam_data$RACE)) 

# Create ggplot object
p <- ggplot(data=exam_data, 
       aes(x = SCIENCE)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL) +
    labs(title = "Distribution of Science Scores",
       subtitle = "Dotplot",
       x = "Science Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.x = element_text(size = 8))

# Create object for tooltip styling
tooltip_css <- "background-color:#93c7c2; #<<
font-style:bold; color:#464646;" #<<

# Pass ggplot object and tooltip styling into girafe
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)   
```
:::


#### Display statistics on tooltip

We can also display derived statistics. 

::: panel-tabset

## The Plot

```{r}
#| echo: False
# Create object for tooltip information  
tooltip <- function(ymin, lower, middle, upper, ymax, accuracy = .01) {
  sem <- scales::number((ymax - ymin) / 2, accuracy = accuracy) # SEM for 90% CI
  median <- scales::number(middle, accuracy = accuracy)
  lower_quartile <- scales::number(lower, accuracy = accuracy)
  upper_quartile <- scales::number(upper, accuracy = accuracy)
  
  paste("Median:", median, 
        "\n25th Quartile:", lower_quartile, 
        "\n75th Quartile:", upper_quartile,
        "\n95% CI: [", scales::number(ymin, accuracy = accuracy), 
        ", ", scales::number(ymax, accuracy = accuracy), "]")
}

# Create ggplot object
gg_boxplot <- ggplot(data = exam_data, aes(x = GENDER, y = ENGLISH)) +
  geom_boxplot_interactive(
    aes(tooltip = after_stat(tooltip(ymin, lower, middle, upper, ymax))), # Pass in after_stat of tooltip information 
    stat = "boxplot"
  ) +
  labs(title = "Boxplot of English Scores by Gender",
       x = "Gender",
       y = "English Scores")

# Pass in ggobject into girafe
girafe(ggobj = gg_boxplot,
       width_svg = 8,
       height_svg = 8*0.618)

```

## The Code Chunk

```{r}
#| eval: False
# Create object for tooltip information  
tooltip <- function(ymin, lower, middle, upper, ymax, accuracy = .01) {
  sem <- scales::number((ymax - ymin) / 2, accuracy = accuracy) # SEM for 90% CI
  median <- scales::number(middle, accuracy = accuracy)
  lower_quartile <- scales::number(lower, accuracy = accuracy)
  upper_quartile <- scales::number(upper, accuracy = accuracy)
  
  paste("Median:", median, 
        "\n25th Quartile:", lower_quartile, 
        "\n75th Quartile:", upper_quartile,
        "\n95% CI: [", scales::number(ymin, accuracy = accuracy), 
        ", ", scales::number(ymax, accuracy = accuracy), "]")
}

# Create ggplot object
gg_boxplot <- ggplot(data = exam_data, aes(x = GENDER, y = ENGLISH)) +
  geom_boxplot_interactive(
    aes(tooltip = after_stat(tooltip(ymin, lower, middle, upper, ymax))), # Pass in after_stat of tooltip information 
    stat = "boxplot"
  ) +
  labs(title = "Boxplot of English Scores by Gender",
       x = "Gender",
       y = "English Scores")

# Pass in ggobject into girafe
girafe(ggobj = gg_boxplot,
       width_svg = 8,
       height_svg = 8*0.618)

```
:::


### `data_id` aesthetic: Hover effect, and styling the hover effect

In the example below, elements associated with a data_id (i.e GENDER) will be highlighted upon mouse over.

We also demonstrate how css codes are used to customize the highlighting effect. 


::: panel-tabset

## The Plot

```{r}
#| echo: False

# Plot ggplot object
p <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(data_id = GENDER)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive Relationship between Science and Maths Scores",
       subtitle = "Scatter Plot of Science and Math Scores of Students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass ggoplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #f5bc5f;"), 
    opts_hover_inv(css = "opacity:0.2;")
  )
)

```

## The Code Chunk

```{r}
#| eval: False

# Plot ggplot object
p <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(data_id = GENDER)) +  # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive Relationship between Science and Maths Scores",
       subtitle = "Scatter Plot of Science and Math Scores of Students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass ggoplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #f5bc5f;"), 
    opts_hover_inv(css = "opacity:0.2;")
  )
)


```
:::

#### Combining tooltip and hover effect

::: panel-tabset

## The Plot

```{r}
#| echo: False

# Plot ggplot object
p <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = GENDER, # Pass in tooltip
        data_id = GENDER)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive Relationship between Science and Maths Scores",
       subtitle = "Scatter Plot of Science and Math Scores of Students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Create object for tooltip styling
tooltip_css <- "background-color:#f53b5d; #<<
font-style:bold; color:black;" #<<

# Pass ggoplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #f5bc5f;"), 
    opts_hover_inv(css = "opacity:0.2;"),
    opts_tooltip(css = tooltip_css)
  )
)

```

## The Code Chunk

```{r}
#| eval: False
# Plot ggplot object
p <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = GENDER, # Pass in tooltip
        data_id = GENDER)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(title = "Positive Relationship between Science and Maths Scores",
       subtitle = "Scatter Plot of Science and Math Scores of Students",
       y = "Science\n Scores",
       x = "Math Scores") +
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 10),
        axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Create object for tooltip styling
tooltip_css <- "background-color:#f53b5d; #<<
font-style:bold; color:black;" #<<

# Pass ggoplot object into girafe
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #f5bc5f;"), 
    opts_hover_inv(css = "opacity:0.2;"),
    opts_tooltip(css = tooltip_css)
  )
)
```
:::

### Click effect with `onclick`

`onclick` argument of ggiraph provides hotlink interactivity on the web.


::: panel-tabset

## The Plot

```{r}
#| echo: False
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick, # Pass in onclick aesthetic
        data_id = ID),   # Pass in data_id to show hover effect before clicking in           
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618) 
```

## The Code Chunk

```{r}
#| eval: False
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick, # Pass in onclick aesthetic
        data_id = ID),   # Pass in data_id to show hover effect before clicking in           
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618) 
```
:::

### Coordinated Multiple Views with ggiraph

We can use *patchwork* function to create interactive coorindated multiple views. 

::: panel-tabset

## The Plot
```{r}
#| echo: false
# Plot first ggplot object
p1 <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(data_id = ID)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(y = "Science\n Scores",
       x = "Math Scores") +
  theme(axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Plot second ggplot object
p2 <- ggplot(data=exam_data, 
            aes(x = MATHS, y = ENGLISH)) +
  geom_point_interactive(
    aes(data_id = ID)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(y = "English\n Scores",
       x = "Math Scores") +
  theme(axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass both ggplot objects into girafe, using patchwork
girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 6*0.618,
       options = list(
         opts_hover(css = "fill: #f5bc5f;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

## The Code Chunk

```{r}
#| eval: false
# Plot first ggplot object
p1 <- ggplot(data=exam_data, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point_interactive(
    aes(data_id = ID)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(y = "Science\n Scores",
       x = "Math Scores") +
  theme(axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Plot second ggplot object
p2 <- ggplot(data=exam_data, 
            aes(x = MATHS, y = ENGLISH)) +
  geom_point_interactive(
    aes(data_id = ID)) + # Pass in data_id
  scale_x_continuous(limits = c(0, NA)) + 
  scale_y_continuous(limits = c(0, NA)) +
  labs(y = "English\n Scores",
       x = "Math Scores") +
  theme(axis.title.y = element_text(size = 8, angle = 360, vjust = 0.5),
        axis.title.x = element_text(size = 8))

# Pass both ggplot objects into girafe, using patchwork
girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 6*0.618,
       options = list(
         opts_hover(css = "fill: #f5bc5f;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

:::

## Interactive Data Visualisation - plotly methods

There are two ways to create interactive graph by using `plotly`, they are:

-   by using `plot_ly()`, and
-   by using `ggplotly()`


### Creating an interactive scatter plot: plot_ly() method

Below we explore a basic way to plot an interactive plot.

::: panel-tabset

## The Plot
```{r}
#| echo: false
plot_ly(data = exam_data, 
        x = ~SCIENCE, 
        y = ~MATHS,
        type = 'scatter',
        mode = 'markers') 
```

## The Code Chunk

```{r}
#| eval: false
plot_ly(data = exam_data, 
        x = ~SCIENCE, 
        y = ~MATHS,
        type = 'scatter',
        mode = 'markers') 
```

:::

#### Working with visual variable

In the code chunk below, *color* argument is mapped to a qualitative visual variable (i.e. RACE).

::: panel-tabset

## The Plot
```{r}
#| echo: false
plot_ly(data = exam_data, 
        x = ~SCIENCE, 
        y = ~MATHS, 
        color = ~RACE,
        type = 'scatter',
        mode = 'markers')
```

## The Code Chunk

```{r}
#| eval: false
plot_ly(data = exam_data, 
        x = ~SCIENCE, 
        y = ~MATHS, 
        color = ~RACE,
        type = 'scatter',
        mode = 'markers')
```

:::


Here is another example for a bar chart. In this example we first preprocess the data to get the counts of students.

::: panel-tabset

## The Plot
```{r}
#| echo: false
# Preprocess the data to get counts per Race and Gender
processed_data <- exam_data %>%
  group_by(RACE, GENDER) %>%
  summarise(Count = n(), .groups = 'drop')

plot_ly(data = processed_data, 
             x = ~RACE, 
             y = ~Count, 
             type = 'bar',
             color = ~GENDER,
             hoverinfo = 'x+y') %>%
  layout(yaxis = list(title = 'Count of Students'),
         barmode = 'group',
         xaxis = list(title = 'Race'))
```

## The Code Chunk

```{r}
#| eval: false
# Preprocess the data to get counts per Race and Gender
processed_data <- exam_data %>%
  group_by(RACE, GENDER) %>%
  summarise(Count = n(), .groups = 'drop')

plot_ly(data = processed_data, 
             x = ~RACE, 
             y = ~Count, 
             type = 'bar',
             color = ~GENDER,
             hoverinfo = 'x+y') %>%
  layout(yaxis = list(title = 'Count of Students'),
         barmode = 'group',
         xaxis = list(title = 'Race'))
```

:::

### Using `ggplotly()` to create interactive charts

We replicate the bar chart using `ggplotly()`.

::: panel-tabset
## The Plot
```{r}
#| echo: false
# Preprocess the data to get counts per Race and Gender
processed_data <- exam_data %>%
  group_by(RACE, GENDER) %>%
  summarise(Count = n(), .groups = 'drop')

# Create the bar chart with ggplot2
p <- ggplot(processed_data, aes(x = RACE, y = Count, fill = GENDER)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(y = "Count of Students", x = "Race") +
  theme_minimal()

# Convert the ggplot2 chart to an interactive plotly chart
ggplotly(p)
```

## The Code Chunk

```{r}
#| eval: false
# Preprocess the data to get counts per Race and Gender
processed_data <- exam_data %>%
  group_by(RACE, GENDER) %>%
  summarise(Count = n(), .groups = 'drop')

# Create the bar chart with ggplot2
p <- ggplot(processed_data, aes(x = RACE, y = Count, fill = GENDER)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(y = "Count of Students", x = "Race") +
  theme_minimal()

# Convert the ggplot2 chart to an interactive plotly chart
ggplotly(p)
```
:::

### Coordinated Multiple Views with `plotly`

The creation of a coordinated linked plot by using plotly involves three steps:

-   highlight_key() of plotly package is used as shared data.
-   two scatterplots will be created by using ggplot2 functions.
-   lastly, subplot() of plotly package is used to place them next to each other side-by-side.


::: panel-tabset
## The Plot
```{r}
#| echo: false
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

# Create object for margins
mrg <- list(l = 80, r = 30,
          b = 50, t = 100,
          pad =15)

subplot(ggplotly(p1), ggplotly(p2), 
        nrows = 1, margin = 0.07,
        titleY = TRUE,
        titleX = TRUE) %>%
  layout(title = paste("Linear relationship between Math scores and other scores", 
                       "<br><sub>Scatter Plots Showing Relationship between Math Scores and English or Science Scores</sub>"),
         margin = mrg)
```

## The Code Chunk

```{r}
#| eval: false
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

# Create object for margins
mrg <- list(l = 80, r = 30,
          b = 50, t = 100,
          pad =15)

subplot(ggplotly(p1), ggplotly(p2), 
        nrows = 1, margin = 0.07,
        titleY = TRUE,
        titleX = TRUE) %>%
  layout(title = paste("Linear relationship between Math scores and other scores", 
                       "<br><sub>Scatter Plots Showing Relationship between Math Scores and English or Science Scores</sub>"),
         margin = mrg)
```
:::

Below is another attempt to create multiple views of plots that are not linked. 

::: panel-tabset

## The Plot

```{r}
#| echo: false

p1 <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH,
                fill = RACE)) +
  geom_point(size=3) +
  coord_cartesian(xlim=c(0,NA),
                  ylim=c(0,NA)) +
  labs(y = "English Scores", x = "Math Scores")

processed_data <- exam_data %>%
  group_by(RACE, GENDER) %>%
  summarise(Count = n(), .groups = 'drop')

p2 <- ggplot(processed_data, aes(x = GENDER, y = Count, fill = RACE)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(y = "Count of Students", x = "Race") +
  theme_minimal()

# Combine the plots into a single interactive display
combined_plot <- subplot(ggplotly(p1), ggplotly(p2), 
                         nrows = 1, margin = 0.07, 
                         shareX = TRUE, shareY = FALSE, 
                         titleX = TRUE, titleY = TRUE)

# Create object for margins
mrg <- list(l = 80, r = 30,
          b = 50, t = 100,
          pad =15)


# Add a title and a subtitle using HTML for formatting
combined_plot %>%
  layout(title = paste("Multiple plots", 
                       "<br><sub>Scatter Plot of English and Math Scores and Bar Plot of Count of Students by Race and Gender</sub>"),
         margin = mrg)
```

## The Code Chunk

```{r}
#| eval: FALSE
p1 <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH,
                fill = RACE)) +
  geom_point(size=3) +
  coord_cartesian(xlim=c(0,NA),
                  ylim=c(0,NA)) +
  labs(y = "English Scores", x = "Math Scores")

processed_data <- exam_data %>%
  group_by(RACE, GENDER) %>%
  summarise(Count = n(), .groups = 'drop')

p2 <- ggplot(processed_data, aes(x = GENDER, y = Count, fill = RACE)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(y = "Count of Students", x = "Race") +
  theme_minimal()

# Combine the plots into a single interactive display
combined_plot <- subplot(ggplotly(p1), ggplotly(p2), 
                         nrows = 1, margin = 0.07, 
                         shareX = TRUE, shareY = FALSE, 
                         titleX = TRUE, titleY = TRUE)

# Create object for margins
mrg <- list(l = 80, r = 30,
          b = 50, t = 100,
          pad =15)


# Add a title and a subtitle using HTML for formatting
combined_plot %>%
  layout(title = paste("Multiple plots", 
                       "<br><sub>Scatter Plot of English and Math Scores and Bar Plot of Count of Students by Race and Gender</sub>"),
         margin = mrg)
```
:::

## Interactive Data Visualisation - crosstalk methods!

Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).


### Interactive Data Table: DT package
```{r}
DT::datatable(exam_data, class= "compact")
```

### Linked brushing: crosstalk method

Besides placing plots with the datatable, we also demo the usage of `highlight_key()`,which simply creates an object of class [crosstalk::SharedData](https://rdrr.io/cran/crosstalk/man/SharedData.html).

::: panel-tabset

## The Plot

```{r}
#| echo: false
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p), on = "plotly_selected", off = "plotly_deselect")
 

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)  
```

## The Code Chunk

```{r}
#| eval: false
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p), on = "plotly_selected", off = "plotly_deselect")
 

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5) 
```
:::
Things to learn from the above code chunk:

-   `highlight()` is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.
-   `bscols()` is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.

# Programming Animated Statistical Graphics with R

## Overview

In this exercise I will learn 

-   how to create animated data visualisation by using **gganimate** and **plotly**
-   how to reshape data by using **tidyr** 
-   how to process, wrangle and transform data by using **dplyr** 

## Getting Started

### Loading libraries

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

### Importing data

In this hands-on exercise, the *Data* worksheet from *GlobalPopulation* Excel workbook will be used.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(all_of(col), as.factor)) %>% 
  mutate(Year = as.integer(Year))
```

## Animated Data Visualisation: gganimate methods

`gganimate()` provides a range of new grammar classes that can be added to the plot object in order to customise how it should animate by changing with time.

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.
-   `view_*()` defines how the positional scales should change along the animation.
-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.
-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.
-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### Building a static plot

We first build a static line chart showing the population for all countries in Asia for the year of 2020. . 

::: panel-tabset

## The Plot

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 10
ggplot(filter(globalPop, Year == 2020, Continent == "Asia"), aes(x = reorder(Country, Population), y = Population)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(title = 'Population by Country in 2020', x = 'Country', y = 'Population')

```

## The Code Chunk

```{r}
#| eval: false
#| fig-width: 12
#| fig-height: 10
ggplot(filter(globalPop, Year == 2020, Continent == "Asia"), aes(x = reorder(Country, Population), y = Population)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(title = 'Population by Country in 2020', x = 'Country', y = 'Population')
```
:::

### Building the animated bar plot

::: panel-tabset

## The Plot

```{r}
#| echo: false
ggplot(filter(globalPop, Continent == "Asia"), aes(x = reorder(Country, Population), y = Population, fill = Country)) +
  geom_bar(stat = "identity") +
  coord_flip() +  # Flip coordinates to make the country names horizontal
  labs(title = 'Population by Country in Asia, Year: {frame_time}', x = '', y = 'Population') +
  theme_minimal() +
  theme(legend.position = "none")  +
  transition_time(Year) +       
  ease_aes('linear') 
```

## The Code Chunk

```{r}
#| eval: false
ggplot(filter(globalPop, Continent == "Asia"), aes(x = reorder(Country, Population), y = Population, fill = Country)) +
  geom_bar(stat = "identity") +
  coord_flip() +  # Flip coordinates to make the country names horizontal
  labs(title = 'Population by Country in Asia, Year: {frame_time}', x = '', y = 'Population') +
  theme_minimal() +
  theme(legend.position = "none")  +
  transition_time(Year) +       
  ease_aes('linear') 
```
:::

You can further customize the animation:


::: panel-tabset

## The Plot

```{r}
#| echo: false
# Build the plot
p <- ggplot(filter(globalPop, Continent == "Asia"), aes(x = reorder(Country, Population), y = Population, fill = Country)) +
  geom_bar(stat = "identity") +
  coord_flip() +  # Flip coordinates to make the country names horizontal
  labs(title = 'Population by Country in Asia, Year: {frame_time}', x = '', y = 'Population') +
  theme_minimal() +
  theme(legend.position = "none")  +
  transition_time(Year) +       
  ease_aes('linear')

# Animate the plot
anim <- p + transition_time(Year) +
  ease_aes('linear')

# Render the animation
animate(anim, nframes = 100, height = 600, width = 1000, fps = 5)
```

## The Code Chunk

```{r}
#| eval: false
# Build the plot
p <- ggplot(filter(globalPop, Continent == "Asia"), aes(x = reorder(Country, Population), y = Population, fill = Country)) +
  geom_bar(stat = "identity") +
  coord_flip() +  # Flip coordinates to make the country names horizontal
  labs(title = 'Population by Country in Asia, Year: {frame_time}', x = '', y = 'Population') +
  theme_minimal() +
  theme(legend.position = "none")  +
  transition_time(Year) +       
  ease_aes('linear')

# Animate the plot
anim <- p + transition_time(Year) +
  ease_aes('linear')

# Render the animation
animate(anim, nframes = 100, height = 600, width = 1000, fps = 5)
```
:::

## Animated Data Visualisation: plotly

### Building an animated bubble plot: `ggplotly()` method

::: panel-tabset

## The Plot

```{r}
#| echo: false
gg <- ggplot(filter(globalPop, Continent == "Asia"),
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') +
  theme(legend.position='none')

ggplotly(gg)
```

## The Code Chunk

```{r}
#| eval: false
gg <- ggplot(filter(globalPop, Continent == "Asia"),
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') +
  theme(legend.position='none')

ggplotly(gg)
```
:::


### Building an animated bubble plot: `plot_ly()` method

::: panel-tabset

## The Plot

```{r}
#| echo: false
#| warning: false
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp

```

## The Code Chunk

```{r}
#| eval: false
#| warning: false
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```
:::


# References

-   [**R for Visual Analytics: Programming Interactive Data Visualisation with R**](https://r4va.netlify.app/chap03).
-   [**R for Visual Analytics: Programming Animated Statistical Graphics with R**](https://r4va.netlify.app/chap04).
