---
title: "Hands-on Exercise 5 (WIP)"
subtitle: "Visual Multivariate Analysis: Visual Correlation Analysis"
date: February 4, 2024
date-modified: "last-modified"
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: true
    
execute: 
  eval: true
  echo: true
  warning: false  
---

# Visual Correlation Analysis

## Overview

Here I practice the following:

-   Creating correlation matrix using *pairs()* of R Graphics
-   Plotting corrgram using **corrplot** package

## Loading libraries

```{r}
pacman::p_load(tidyverse, corrplot, ggstatsplot)
```

## Import and prepare data

### Importing data

```{r}
wine <- read_csv("data/wine_quality.csv")
```

## Building correlation matrix with [`pairs()`](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html) method

### Basic correlation matrix

```{r}
pairs(wine[,1:11]) # Means to select all rows, and columns 1 to 11. 
```

```{r}
pairs(wine[,2:12]) # TO select all rows from col 2 to 12
```

### Drawing the lower corner

It is common practice to show either upper half or lower half of the correlation matrix instead of both, because a correlation matrix is symmetric.

We can customize this using `upper.panel` or `lower.panel`.

```{r}
pairs(wine[,2:5], upper.panel = NULL)
```

```{r}
pairs(wine[,2:5], lower.panel = NULL)
```

### Including with correlation coefficients

```{r}

panel.cor <- function(x, y, digits=2, prefix="", cex.cor) {
    usr <- par("usr")
    par(usr = c(0, 1, 0, 1))
    r <- abs(cor(x, y, use = "complete.obs"))
    txt <- format(c(r, 0.123456789), digits = digits)[1]
    txt <- paste(prefix, txt, sep = "")
    if (missing(cex.cor)) cex.cor <- 0.8 / strwidth(txt)
    text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}


pairs(wine[,2:5], 
      upper.panel = panel.cor)
```

## Visualising Correlation Matrix: `ggcormat()`

There are at least three R packages that provide functions to plot corrgram:

-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)

-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)

-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)

In this section, we will practice visualising correlation matrix by using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) package.

### Basic plot

```{r}
#| fig-width: 10
ggcorrmat(
  data = wine, 
  cor.vars = 1:11 # used to compute the correlation matrix needed to build the corrgram
  )
```

```{r}
#| fig-width: 10
ggcorrmat(
  data = wine, 
  cor.vars = 1:11, # used to compute the correlation matrix needed to build the corrgram
  ggcorrplot.args =  #  provide additional aesthetic arguments
    list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05",
  ggplot.component = list(
    theme(text=element_text(size=10),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
)

```

::: callout-note
For ` ggcorrplot.arg`, the list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.
:::

## Building multiple plots

To plot facet, we need to use `grouped_ggcorrmat()`

```{r}
#| fig-width: 14
#| fig-height: 7
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```


# References

-   [**R for Visual Analytics: Visual Correlation Analysis**](https://r4va.netlify.app/chap06)
-   R for Visual Analytics:
