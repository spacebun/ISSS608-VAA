---
title: "Hands-on Exercise 5b"
subtitle: "Visual Multivariate Analysis: Visual Correlation Analysis"
date: February 4, 2024
date-modified: "last-modified"
format:
  html:
    toc: true
    number-sections: true
    code-line-numbers: true
    
execute: 
  eval: true
  echo: true
  warning: false  
---

# Visual Correlation Analysis

## Overview

Here I practice the following:

-   Creating correlation matrix using *pairs()* of R Graphics
-   Plotting corrgram using **corrplot** package

## Loading libraries

```{r}
pacman::p_load(tidyverse, corrplot, ggstatsplot)
```

## Import and prepare data

### Importing data

```{r}
wine <- read_csv("data/wine_quality.csv")
```

## Building correlation matrix with [`pairs()`](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html) method

### Basic correlation matrix

```{r}
pairs(wine[,1:11]) # Means to select all rows, and columns 1 to 11. 
```

```{r}
pairs(wine[,2:12]) # TO select all rows from col 2 to 12
```

### Drawing the lower corner

It is common practice to show either upper half or lower half of the correlation matrix instead of both, because a correlation matrix is symmetric.

We can customize this using `upper.panel` or `lower.panel`.

```{r}
pairs(wine[,2:5], upper.panel = NULL)
```

```{r}
pairs(wine[,2:5], lower.panel = NULL)
```

### Including with correlation coefficients

```{r}

panel.cor <- function(x, y, digits=2, prefix="", cex.cor) {
    usr <- par("usr")
    par(usr = c(0, 1, 0, 1))
    r <- abs(cor(x, y, use = "complete.obs"))
    txt <- format(c(r, 0.123456789), digits = digits)[1]
    txt <- paste(prefix, txt, sep = "")
    if (missing(cex.cor)) cex.cor <- 0.8 / strwidth(txt)
    text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}


pairs(wine[,2:5], 
      upper.panel = panel.cor)
```

## Visualising Correlation Matrix: `ggcormat()`

There are at least three R packages that provide functions to plot corrgram:

-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)

-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)

-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)

In this section, we will practice visualising correlation matrix by using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) package.

### Basic plot

```{r}
#| fig-width: 10
ggcorrmat(
  data = wine, 
  cor.vars = 1:11 # used to compute the correlation matrix needed to build the corrgram
  )
```

```{r}
#| fig-width: 10
ggcorrmat(
  data = wine, 
  cor.vars = 1:11, # used to compute the correlation matrix needed to build the corrgram
  ggcorrplot.args =  #  provide additional aesthetic arguments
    list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05",
  ggplot.component = list(
    theme(text=element_text(size=10),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
)

```

::: callout-note
For `ggcorrplot.arg`, the list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.
:::

## Building multiple plots

To plot facet, we need to use `grouped_ggcorrmat()`

```{r}
#| fig-width: 14
#| fig-height: 7
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

## Visualising Correlation Matrix using `corrplot`

First, read up on [this link](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html).

-   about 50 parameters including `method`, `type`, `order`, `diag`
-   color intensity of glyph is proportional to correlation coefficient by default
-   The colors of the correlation plots can be customized by `col` in corrplot()

### Getting started with corrplot

First we compute the correlation matrix of the data frame:

```{r}
wine.cor <- cor(wine[,1:11])
```

Nex, we plot the corrgram:

```{r}
corrplot(wine.cor)
```

Things that can be changed:

-   Visualization method (`method`)
-   Layout (`type`)
-   Color scheme (diverging or sequential)
-   color choice for positive or negative correlation coefficient
-   saturation to represent strength of correlation coeffcient

### Working with visual geometrics

Seven visualization methods '`circle`', '`square`', '`ellipse`', '`number`', '`shade`', '`color`', '`pie`' Vary the visualization method with `method` argument.

```{r}
corrplot(wine.cor, 
         method = "color") 
```

### Working with layout

-   use `type` argument to vary layout: “full”, “upper” or “lower”

```{r}
corrplot(wine.cor, 
         method = "color", 
         type="upper")
```

### Working with mixed layout

-   `corrplot.mixed()`: Set visual methods of lower and upper triangular separately

```{r}
corrplot.mixed(wine.cor, 
               lower = "color", 
               upper = "pie", #  circles are filled clockwise for positive values, anti-clockwise for negative values
               tl.pos = "lt", # “d”, “lt”, “n” text label in diagonal, lt is left and top, n is none
               diag = "u", # “n”, “l”, “u” none, lower or upper
               tl.col = "black")
```

### Combining corrgram with the significant test

-   `p.mat` is the p-value matrix.
-   We can get p-value matrix and confidence intervals matrix by `cor.mtest()` which returns a list containing: `p` is the p-values matrix, `lowCI` is the lower bound of confidence interval matrix. `uppCI` is the lower bound of confidence interval matrix.

```{r}
wine.sig = cor.mtest(wine.cor, conf.level= .95)
```

Then use p.mat argument:

```{r}
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

### Reorder a corrgram

We can re-order the matrix according to correlation coefficients using *`order`* argument.

-   “AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.
-   “FPC” for the first principal component order.
-   “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.
    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.
-   “alphabet” for alphabetical order.

More algorithms can be found in **seriation** package.

```{r}
corrplot.mixed(wine.cor, 
               lower = "color", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

### Reorder a corrgram using `hclust()`

If using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.

-   `'hclust.method'` should be one of `'ward'`, `'ward.D'`, `'ward.D2'`, `'single'`, `'complete'`, `'average'`, `'mcquitty'`, `'median'` or `'centroid'`.

```{r}
corrplot(wine.cor, 
         method = "color", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

# References

-   [**R for Visual Analytics: Visual Correlation Analysis**](https://r4va.netlify.app/chap06)
